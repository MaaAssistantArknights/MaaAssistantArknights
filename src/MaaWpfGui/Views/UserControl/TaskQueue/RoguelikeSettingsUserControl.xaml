<UserControl
    x:Class="MaaWpfGui.Views.UserControl.TaskQueue.RoguelikeSettingsUserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
    xmlns:controls="clr-namespace:MaaWpfGui.Styles.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:local="clr-namespace:MaaWpfGui.Views.UserControl.TaskQueue"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:s="https://github.com/canton7/Stylet"
    xmlns:setting="clr-namespace:MaaWpfGui.ViewModels.UI"
    xmlns:task="clr-namespace:MaaWpfGui.Configuration.Single.MaaTask"
    xmlns:ui="clr-namespace:MaaWpfGui.ViewModels.UserControl.TaskQueue"
    d:Background="White"
    d:DataContext="{d:DesignInstance {x:Type ui:RoguelikeSettingsUserControlModel}}"
    d:DesignWidth="220"
    s:View.ActionTarget="{Binding}"
    mc:Ignorable="d">
    <StackPanel>
        <StackPanel
            d:Visibility="Visible"
            IsEnabled="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
            Visibility="{c:Binding !EnableAdvancedSettings,
                                   Source={x:Static setting:TaskQueueViewModel.TaskSettingVisibilities}}">
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource RoguelikeTheme}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeThemeList}"
                SelectedValue="{Binding RoguelikeTheme}"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource RoguelikeDifficulty}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Path=Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeDifficultyList}"
                ScrollViewer.CanContentScroll="False"
                SelectedValue="{Binding RoguelikeDifficulty}"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource Strategy}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Path=Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                IsSynchronizedWithCurrentItem="True"
                ItemsSource="{Binding RoguelikeModeList}"
                SelectedValue="{Binding RoguelikeMode}"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Margin="0,5"
                d:Visibility="Visible"
                hc:InfoElement.Title="{DynamicResource RoguelikeCollectibleModeSquad}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                IsSynchronizedWithCurrentItem="True"
                ItemsSource="{Binding RoguelikeSquadList}"
                MaxDropDownHeight="800"
                SelectedValue="{Binding RoguelikeCollectibleModeSquad}"
                SelectedValuePath="Value"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Collectible',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource StartingSquad}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeSquadList}"
                MaxDropDownHeight="800"
                SelectedValue="{Binding RoguelikeSquad}"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource StartingRoles}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeRolesList}"
                SelectedValue="{Binding RoguelikeRoles}"
                SelectedValuePath="Value" />
            <Grid Margin="0,5">
                <hc:ComboBox
                    Name="StartingCoreCharComboBox"
                    hc:InfoElement.Title="{DynamicResource StartingCoreChar}"
                    DropDownClosed="StartingCoreCharComboBox_DropDownClosed"
                    IsEditable="True"
                    IsTextSearchEnabled="False"
                    ItemsSource="{Binding RoguelikeCoreCharList}"
                    Loaded="{s:Action MakeComboBoxSearchable,
                                      Target={x:Type setting:SettingsViewModel}}">
                    <hc:ComboBox.Text>
                        <Binding Path="RoguelikeCoreChar" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <local:StartingCoreCharRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </hc:ComboBox.Text>
                </hc:ComboBox>
                <controls:TooltipBlock
                    Margin="0,0,5,0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    TooltipText="{DynamicResource StartingCoreCharTip}" />
            </Grid>
        </StackPanel>

        <StackPanel
            d:Visibility="Visible"
            IsEnabled="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
            Visibility="{c:Binding EnableAdvancedSettings,
                                   Source={x:Static setting:TaskQueueViewModel.TaskSettingVisibilities}}">
            <hc:NumericUpDown
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource StartTimesLimit}"
                Maximum="99999"
                Minimum="0"
                Value="{Binding RoguelikeStartsCount}" />
            <CheckBox
                Name="InvestmentEnabled"
                Margin="0,10"
                d:IsEnabled="True"
                Content="{DynamicResource InvestmentEnabled}"
                IsChecked="{Binding RoguelikeInvestmentEnabled}"
                IsEnabled="{c:Binding 'RoguelikeMode != task:RoguelikeMode.Investment',
                                      Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}" />
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding RoguelikeInvestmentWithMoreScoreRaw}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Investment and RoguelikeTheme != task:RoguelikeTheme.JieGarden',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <!--  先只在ui屏蔽，要实现进洞退出才能做到进二层  -->
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource InvestmentWithMoreScore}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding RoguelikeCollectibleModeShopping}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Collectible',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeCollectibleModeShopping}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeStopWhenInvestmentFull}"
                Visibility="{c:Binding ElementName=InvestmentEnabled,
                                       Path=IsChecked}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource StopOnGoldLimit}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <hc:NumericUpDown
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource GoldTimesLimit}"
                Maximum="999"
                Minimum="0"
                Visibility="{c:Binding ElementName=InvestmentEnabled,
                                       Path=IsChecked}"
                Value="{Binding RoguelikeInvestsCount}" />
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                Content="{DynamicResource RefreshTraderWithDice}"
                IsChecked="{Binding RoguelikeRefreshTraderWithDiceRaw}"
                Visibility="{c:Binding 'RoguelikeTheme == task:RoguelikeTheme.Mizuki',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}" />
            <StackPanel>
                <CheckBox
                    Margin="0,10"
                    IsChecked="{Binding RoguelikeStartWithEliteTwo}"
                    Visibility="{c:Binding '(RoguelikeSquadIsProfessional) and ((RoguelikeTheme == task:RoguelikeTheme.Mizuki) or (RoguelikeTheme == task:RoguelikeTheme.Sami))',
                                           Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                    <TextBlock
                        Block.TextAlignment="Left"
                        Text="{DynamicResource RoguelikeStartWithEliteTwo}"
                        TextWrapping="Wrap" />
                </CheckBox>
                <CheckBox
                    Margin="0,10"
                    IsChecked="{Binding RoguelikeOnlyStartWithEliteTwoRaw}"
                    Visibility="{c:Binding '(RoguelikeStartWithEliteTwo) and (RoguelikeMode == task:RoguelikeMode.Collectible) and ((RoguelikeTheme == task:RoguelikeTheme.Mizuki) or (RoguelikeTheme == task:RoguelikeTheme.Sami))',
                                           Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                    <TextBlock
                        Block.TextAlignment="Left"
                        Text="{DynamicResource RoguelikeOnlyStartWithEliteTwo}"
                        TextWrapping="Wrap" />
                </CheckBox>
            </StackPanel>

            <hc:CheckComboBox
                Margin="0,10"
                d:Visibility="Visible"
                hc:ListBoxAttach.SelectedItems="{Binding RoguelikeStartWithSelectList}"
                hc:TitleElement.Title="{DynamicResource RoguelikeStartWithSelectList}"
                DisplayMemberPath="Display"
                ItemsSource="{Binding RoguelikeStartAwards}"
                SelectedValuePath="Value"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Collectible and !RoguelikeOnlyStartWithEliteTwoRaw',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}" />
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding Roguelike3FirstFloorFoldartal}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Collectible and RoguelikeTheme == task:RoguelikeTheme.Sami',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource Roguelike3FirstFloorFoldartal}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <hc:TextBox
                d:Visibility="Visible"
                IsReadOnly="{c:Binding !Idle,
                                       Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                Style="{StaticResource TextBoxExtend}"
                Text="{Binding Roguelike3FirstFloorFoldartals}"
                Visibility="{c:Binding 'Roguelike3FirstFloorFoldartal and RoguelikeMode == task:RoguelikeMode.Collectible and RoguelikeTheme == task:RoguelikeTheme.Sami',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}" />
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding Roguelike3NewSquad2StartingFoldartal}"
                Visibility="{c:Binding RoguelikeSquadIsFoldartal}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource Roguelike3NewSquad2StartingFoldartal}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <TextBox
                IsReadOnly="{c:Binding !Idle,
                                       Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                Text="{Binding Roguelike3NewSquad2StartingFoldartals}"
                ToolTip="{DynamicResource Roguelike3NewSquad2StartingFoldartalTip}"
                Visibility="{c:Binding 'Roguelike3NewSquad2StartingFoldartal and RoguelikeSquadIsFoldartal'}" />
            <hc:TextBox
                d:Visibility="Visible"
                hc:InfoElement.Title="{DynamicResource RoguelikeCollapseList}"
                IsReadOnly="{c:Binding !Idle,
                                       Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                Text="{Binding RoguelikeExpectedCollapsalParadigms}"
                ToolTip="{DynamicResource RoguelikeCollapseListTip}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.CLP_PDS',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}" />
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeUseSupportUnit}"
                Visibility="{c:Binding 'RoguelikeCoreChar != &quot;&quot;'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeUseSupportUnit}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeEnableNonfriendSupport}"
                Visibility="{c:Binding RoguelikeUseSupportUnit}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeUseNonFriendSupport}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding RoguelikeStopAtFinalBoss}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Exp and RoguelikeTheme != task:RoguelikeTheme.Phantom',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeStopAtFinalBoss}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding RoguelikeMonthlySquadAutoIterate}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Squad',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeMonthlySquadAutoIterate}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding RoguelikeMonthlySquadCheckComms}"
                Visibility="{c:Binding 'RoguelikeMonthlySquadAutoIterate and RoguelikeMode == task:RoguelikeMode.Squad',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeMonthlySquadCheckComms}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding RoguelikeDeepExplorationAutoIterate}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Exploration',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeDeepExplorationAutoIterate}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                d:Visibility="Visible"
                IsChecked="{Binding RoguelikeStopAtMaxLevel}"
                Visibility="{c:Binding 'RoguelikeMode == task:RoguelikeMode.Exp',
                                       Source={x:Static ui:RoguelikeSettingsUserControlModel.Instance}}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeStopAtMaxLevel}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <!--<CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeStartWithSeed}"
                Visibility="{c:Binding 'RoguelikeMode == 1 and RoguelikeTheme == task:RoguelikeTheme.Sarkaz and (RoguelikeSquad == &quot;点刺成锭分队&quot; or RoguelikeSquad == &quot;后勤分队&quot;)'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeStartWithSeed}"
                    TextWrapping="Wrap" />
            </CheckBox>-->
        </StackPanel>
    </StackPanel>
</UserControl>
