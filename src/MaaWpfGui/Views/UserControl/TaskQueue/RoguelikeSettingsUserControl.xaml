<UserControl
    x:Class="MaaWpfGui.Views.UserControl.TaskQueue.RoguelikeSettingsUserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
    xmlns:controls="clr-namespace:MaaWpfGui.Styles.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:local="clr-namespace:MaaWpfGui.Views.UserControl.TaskQueue"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:s="https://github.com/canton7/Stylet"
    xmlns:setting="clr-namespace:MaaWpfGui.ViewModels.UI"
    xmlns:task="clr-namespace:MaaWpfGui.ViewModels.UserControl.TaskQueue"
    d:Background="White"
    d:DataContext="{d:DesignInstance {x:Type task:RoguelikeSettingsUserControlModel}}"
    d:DesignWidth="220"
    s:View.ActionTarget="{Binding}"
    mc:Ignorable="d">
    <StackPanel>
        <StackPanel IsEnabled="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}" Visibility="{c:Binding !EnableAdvancedSettings, Source={x:Static setting:TaskQueueViewModel.TaskSettingVisibilities}}">
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource RoguelikeTheme}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeThemeList}"
                SelectedValue="{Binding RoguelikeTheme}"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource RoguelikeDifficulty}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Path=Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeDifficultyList}"
                ScrollViewer.CanContentScroll="False"
                SelectedValue="{Binding RoguelikeDifficulty}"
                SelectedValuePath="Value"
                Visibility="{c:Binding 'RoguelikeTheme != task:RoguelikeTheme.Phantom'}" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource Strategy}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Path=Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeModeList}"
                SelectedValue="{Binding RoguelikeMode}"
                IsSynchronizedWithCurrentItem="True"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource RoguelikeCollectibleModeSquad}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                IsSynchronizedWithCurrentItem="True"
                ItemsSource="{Binding RoguelikeSquadList}"
                MaxDropDownHeight="800"
                SelectedValue="{Binding RoguelikeCollectibleModeSquad}"
                SelectedValuePath="Value"
                Visibility="{c:Binding 'RoguelikeMode == 4'}" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource StartingSquad}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeSquadList}"
                MaxDropDownHeight="800"
                SelectedValue="{Binding RoguelikeSquad}"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource StartingRoles}"
                DisplayMemberPath="Display"
                IsHitTestVisible="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                ItemsSource="{Binding RoguelikeRolesList}"
                SelectedValue="{Binding RoguelikeRoles}"
                SelectedValuePath="Value" />
            <hc:ComboBox
                Name="StartingCoreCharComboBox"
                Margin="0,5,0,25"
                hc:InfoElement.Title="{DynamicResource StartingCoreChar}"
                DropDownClosed="StartingCoreCharComboBox_DropDownClosed"
                IsEditable="True"
                IsTextSearchEnabled="False"
                ItemsSource="{Binding RoguelikeCoreCharList}"
                Loaded="{s:Action MakeComboBoxSearchable,
                                  Target={x:Type setting:SettingsViewModel}}"
                ToolTip="{DynamicResource StartingCoreCharTip}">
                <hc:ComboBox.Text>
                    <Binding Path="RoguelikeCoreChar" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <local:StartingCoreCharRule />
                        </Binding.ValidationRules>
                    </Binding>
                </hc:ComboBox.Text>
            </hc:ComboBox>
        </StackPanel>

        <StackPanel IsEnabled="{Binding Idle, Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}" Visibility="{c:Binding EnableAdvancedSettings, Source={x:Static setting:TaskQueueViewModel.TaskSettingVisibilities}}">
            <hc:NumericUpDown
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource StartTimesLimit}"
                Maximum="99999"
                Minimum="0"
                Style="{StaticResource NumericUpDownExtend}"
                Value="{Binding RoguelikeStartsCount}" />
            <CheckBox
                Name="InvestmentEnabled"
                Margin="0,10"
                Content="{DynamicResource InvestmentEnabled}"
                IsChecked="{Binding RoguelikeInvestmentEnabled}"
                IsEnabled="{c:Binding 'RoguelikeMode != 1'}" />
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeInvestmentWithMoreScoreRaw}"
                Visibility="{c:Binding 'RoguelikeMode == 1'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource InvestmentWithMoreScore}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeCollectibleModeShopping}"
                Visibility="{c:Binding 'RoguelikeMode == 4'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeCollectibleModeShopping}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeStopWhenInvestmentFull}"
                Visibility="{c:Binding ElementName=InvestmentEnabled,
                                       Path=IsChecked}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource StopOnGoldLimit}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <hc:NumericUpDown
                Margin="0,5"
                hc:InfoElement.Title="{DynamicResource GoldTimesLimit}"
                Maximum="999"
                Minimum="0"
                Style="{StaticResource NumericUpDownExtend}"
                Visibility="{c:Binding ElementName=InvestmentEnabled,
                                       Path=IsChecked}"
                Value="{Binding RoguelikeInvestsCount}" />
            <CheckBox
                Margin="0,10"
                Content="{DynamicResource RefreshTraderWithDice}"
                IsChecked="{Binding RoguelikeRefreshTraderWithDiceRaw}"
                Visibility="{c:Binding 'RoguelikeTheme == task:RoguelikeTheme.Mizuki'}" />
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeStartWithEliteTwoRaw}"
                Visibility="{c:Binding 'RoguelikeMode == 4 and RoguelikeTheme != task:RoguelikeTheme.Phantom and RoguelikeSquad == &quot;突击战术分队&quot; or RoguelikeSquad == &quot;堡垒战术分队&quot; or RoguelikeSquad == &quot;远程战术分队&quot; or RoguelikeSquad == &quot;破坏战术分队&quot;'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeStartWithEliteTwo}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeOnlyStartWithEliteTwoRaw}"
                Visibility="{c:Binding 'RoguelikeStartWithEliteTwoRaw and RoguelikeMode == 4 and RoguelikeTheme != task:RoguelikeTheme.Phantom'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeOnlyStartWithEliteTwo}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <hc:CheckComboBox
                x:Name="CheckComboBox"
                Margin="0,10"
                hc:ListBoxAttach.SelectedItems="{Binding RoguelikeStartWithSelectListRaw}"
                hc:TitleElement.Title="{DynamicResource RoguelikeStartWithSelectList}"
                DisplayMemberPath="Value"
                ItemsSource="{Binding RoguelikeStartWithAllDict}"
                Style="{StaticResource CheckComboBoxExtend}"
                Visibility="{c:Binding 'RoguelikeMode == 4 and !RoguelikeOnlyStartWithEliteTwoRaw'}" />
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding Roguelike3FirstFloorFoldartalRaw}"
                Visibility="{c:Binding 'RoguelikeMode == 4 and RoguelikeTheme == task:RoguelikeTheme.Sami'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource Roguelike3FirstFloorFoldartal}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <hc:TextBox
                IsReadOnly="{c:Binding !Idle,
                                       Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                Style="{StaticResource TextBoxExtend}"
                Text="{Binding Roguelike3StartFloorFoldartal, UpdateSourceTrigger=LostFocus}"
                Visibility="{c:Binding 'Roguelike3FirstFloorFoldartalRaw and RoguelikeMode == 4 and RoguelikeTheme == task:RoguelikeTheme.Sami'}" />
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding Roguelike3NewSquad2StartingFoldartalRaw}"
                Visibility="{c:Binding 'RoguelikeMode == 4 and RoguelikeTheme == task:RoguelikeTheme.Sami and RoguelikeSquad == &quot;生活至上分队&quot; '}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource Roguelike3NewSquad2StartingFoldartal}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <TextBox
                IsReadOnly="{c:Binding !Idle,
                                       Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                Text="{Binding Roguelike3NewSquad2StartingFoldartals, UpdateSourceTrigger=LostFocus}"
                ToolTip="{DynamicResource Roguelike3NewSquad2StartingFoldartalTip}"
                Visibility="{c:Binding 'Roguelike3NewSquad2StartingFoldartalRaw and RoguelikeMode == 4 and RoguelikeTheme == task:RoguelikeTheme.Sami and RoguelikeSquad == &quot;生活至上分队&quot; '}" />
            <hc:TextBox
                hc:InfoElement.Title="{DynamicResource RoguelikeCollapseList}"
                IsReadOnly="{c:Binding !Idle,
                                       Source={x:Static setting:TaskQueueViewModel.TaskSettingDataContext}}"
                Text="{Binding RoguelikeExpectedCollapsalParadigms, UpdateSourceTrigger=LostFocus}"
                ToolTip="{DynamicResource RoguelikeCollapseListTip}"
                Visibility="{c:Binding 'RoguelikeMode == 5'}" />
            <CheckBox Margin="0,10" IsChecked="{Binding RoguelikeUseSupportUnit}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeUseSupportUnit}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeEnableNonfriendSupport}"
                Visibility="{c:Binding RoguelikeUseSupportUnit}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeUseNonFriendSupport}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeStopAtFinalBoss}"
                Visibility="{c:Binding 'RoguelikeMode == 0'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeStopAtFinalBoss}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeMonthlySquadAutoIterate}"
                Visibility="{c:Binding 'RoguelikeMode == 6'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeMonthlySquadAutoIterate}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeMonthlySquadCheckComms}"
                Visibility="{c:Binding 'RoguelikeMonthlySquadAutoIterate and RoguelikeMode == 6'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeMonthlySquadCheckComms}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeDeepExplorationAutoIterate}"
                Visibility="{c:Binding 'RoguelikeMode == 7'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeDeepExplorationAutoIterate}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeStopAtMaxLevel}"
                Visibility="{c:Binding 'RoguelikeMode == 0'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeStopAtMaxLevel}"
                    TextWrapping="Wrap" />
            </CheckBox>
            <CheckBox
                Margin="0,10"
                IsChecked="{Binding RoguelikeStartWithSeedRaw}"
                Visibility="{c:Binding 'RoguelikeMode == 1 and RoguelikeTheme == task:RoguelikeTheme.Sarkaz and (RoguelikeSquad == &quot;点刺成锭分队&quot; or RoguelikeSquad == &quot;后勤分队&quot;)'}">
                <TextBlock
                    Block.TextAlignment="Left"
                    Text="{DynamicResource RoguelikeStartWithSeed}"
                    TextWrapping="Wrap" />
            </CheckBox>
        </StackPanel>
    </StackPanel>
</UserControl>
