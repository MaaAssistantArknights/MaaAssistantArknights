import{_ as r,c as l,a as i,e as t,b as a,d as s,w as o,r as d,o as h}from"./app-BkJ_ETHV.js";const p={},c={class:"hint-container tip"};function u(g,e){const n=d("VPLink");return h(),l("div",null,[e[14]||(e[14]=i("h2",{id:"preparation",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#preparation"},[i("span",null,"Preparation")])],-1)),e[15]||(e[15]=i("p",null,"Choose one of the following installation methods:",-1)),e[16]||(e[16]=i("h3",{id:"using-maa-cli",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#using-maa-cli"},[i("span",null,"Using maa-cli")])],-1)),i("p",null,[e[1]||(e[1]=i("a",{href:"https://github.com/MaaAssistantArknights/maa-cli",target:"_blank",rel:"noopener noreferrer"},"maa-cli",-1)),e[2]||(e[2]=a(" is a simple command-line tool for MAA written in Rust. Please read the ",-1)),s(n,{href:"../cli/"},{default:o(()=>[...e[0]||(e[0]=[a("CLI User Guide",-1)])]),_:1}),e[3]||(e[3]=a(" for installation and usage instructions.",-1))]),e[17]||(e[17]=t('<h3 id="using-wine" tabindex="-1"><a class="header-anchor" href="#using-wine"><span>Using Wine</span></a></h3><p>The MAA WPF GUI can currently be run through Wine.</p><h4 id="installation-steps" tabindex="-1"><a class="header-anchor" href="#installation-steps"><span>Installation Steps</span></a></h4><ol><li><p>Go to the <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0" target="_blank" rel="noopener noreferrer">.NET download page</a> and download/install the Windows version of .NET <strong>Desktop</strong> Runtime.</p></li><li><p>Download the Windows version of MAA, extract it, and run <code>wine MAA.exe</code>.</p></li></ol><div class="hint-container info"><p class="hint-container-title">Note</p><p>You need to set the ADB path to the <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener noreferrer">Windows version of <code>adb.exe</code></a> in the connection settings.</p><p>If you need to connect to USB devices via ADB, first run <code>adb start-server</code> outside of Wine to connect to the native ADB server through Wine.</p></div><h4 id="using-linux-native-maacore-experimental" tabindex="-1"><a class="header-anchor" href="#using-linux-native-maacore-experimental"><span>Using Linux Native MaaCore (Experimental)</span></a></h4><p>Download and build the <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/tree/dev/src/MaaWineBridge" target="_blank" rel="noopener noreferrer">MAA Wine Bridge</a> source code, replace the Windows version with the generated <code>MaaCore.dll</code> (ELF file), and place the Linux native dynamic libraries (<code>libMaaCore.so</code> and dependencies) in the same directory.</p><p>When running <code>MAA.exe</code> through Wine, it will load the Linux native libraries.</p><div class="hint-container info"><p class="hint-container-title">Note</p><p>When using the Linux native MaaCore, you need to set the ADB path to the Linux native ADB in the connection settings.</p></div><h4 id="linux-desktop-integration-experimental" tabindex="-1"><a class="header-anchor" href="#linux-desktop-integration-experimental"><span>Linux Desktop Integration (Experimental)</span></a></h4><p>Desktop integration provides native desktop notification support and maps fontconfig font configurations to WPF.</p><p>Place the <code>MaaDesktopIntegration.so</code> generated by MAA Wine Bridge in the same directory as <code>MAA.exe</code> to enable this feature.</p><h4 id="known-issues" tabindex="-1"><a class="header-anchor" href="#known-issues"><span>Known Issues</span></a></h4><ul><li>Wine DirectWrite forces hinting and doesn&#39;t pass DPI to FreeType, resulting in poor font display.</li><li>When not using native desktop notifications, popup notifications grab the system-wide mouse focus, making it impossible to interact with other windows. You can mitigate this by enabling virtual desktop mode in <code>winecfg</code> or disabling desktop notifications.</li><li>Wine-staging users need to disable the <code>Hide Wine version</code> option in <code>winecfg</code> for MAA to correctly detect the Wine environment.</li><li>Wine&#39;s Light theme causes text color issues in WPF. We recommend using no theme (Windows Classic theme) in <code>winecfg</code>.</li><li>Wine uses the old XEmbed tray icon system, which may not work properly under GNOME.</li><li>When using Linux native MaaCore, automatic updates are not supported (<s>the updater thinks: I should download a Windows version</s>)</li></ul><h3 id="using-python" tabindex="-1"><a class="header-anchor" href="#using-python"><span>Using Python</span></a></h3><h4 id="_1-installing-maa-dynamic-library" tabindex="-1"><a class="header-anchor" href="#_1-installing-maa-dynamic-library"><span>1. Installing MAA Dynamic Library</span></a></h4><ol><li><p>Download and extract the Linux dynamic library from the <a href="https://maa.plus/" target="_blank" rel="noopener noreferrer">MAA website</a>, or install from a software repository:</p><ul><li>AUR: <a href="https://aur.archlinux.org/packages/maa-assistant-arknights" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a>, follow the post-installation instructions</li><li>Nixpkgs: <a href="https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/by-name/ma/maa-assistant-arknights/package.nix" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a></li></ul></li><li><p>Navigate to <code>./MAA-v{version}-linux-{architecture}/Python/</code> and open the <code>sample.py</code> file</p></li></ol>',17)),i("div",c,[e[7]||(e[7]=i("p",{class:"hint-container-title"},"Tips",-1)),i("p",null,[e[5]||(e[5]=a("The precompiled version includes dynamic libraries compiled on relatively new Linux distributions (Ubuntu 22.04). If your system has an older libstdc++ version, you might encounter ABI incompatibility issues. You can refer to the ",-1)),s(n,{href:"../../develop/linux-tutorial.md"},{default:o(()=>[...e[4]||(e[4]=[a("Linux Compilation Tutorial",-1)])]),_:1}),e[6]||(e[6]=a(" to recompile or use a container solution.",-1))])]),e[18]||(e[18]=t(`<h4 id="_2-adb-configuration" tabindex="-1"><a class="header-anchor" href="#_2-adb-configuration"><span>2. ADB Configuration</span></a></h4><ol><li><p>Find the line <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/b4fc3528decd6777441a8aca684c22d35d2b2574/src/Python/sample.py#L62" target="_blank" rel="noopener noreferrer"><code>if asst.connect(&#39;adb.exe&#39;, &#39;127.0.0.1:5554&#39;):</code></a></p></li><li><p>ADB Tool Configuration</p><ul><li>If using <code>Android Studio</code>&#39;s <code>AVD</code> emulator, it comes with ADB. You can directly specify the ADB path to replace <code>adb.exe</code>, typically found in <code>$HOME/Android/Sdk/platform-tools/</code>, for example:</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> asst.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/home/foo/Android/Sdk/platform-tools/adb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;emulator&#39;s ADB address&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>For other emulators, first install ADB: <code>$ sudo apt install adb</code>, then either specify the path or simply use <code>adb</code> if it&#39;s in your <code>PATH</code> environment variable.</li></ul></li><li><p>Getting the Emulator&#39;s ADB Address</p><ul><li>Use the ADB tool directly: <code>$ adb_path devices</code>, for example:</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> devices</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">List</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> devices</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> attached</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator-5554</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The returned <code>emulator-5554</code> is the emulator&#39;s ADB address. Replace <code>127.0.0.1:5555</code> with it, for example:</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> asst.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/home/foo/Android/Sdk/platform-tools/adb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;emulator-5554&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Now you can test with <code>$ python3 sample.py</code>. If it returns &quot;Connection successful,&quot; you&#39;re ready to proceed.</p></li></ol><h4 id="_3-task-configuration" tabindex="-1"><a class="header-anchor" href="#_3-task-configuration"><span>3. Task Configuration</span></a></h4>`,3)),i("p",null,[e[9]||(e[9]=a("Custom tasks: Refer to the ",-1)),s(n,{href:"../../protocol/integration.md"},{default:o(()=>[...e[8]||(e[8]=[a("Integration Documentation",-1)])]),_:1}),e[10]||(e[10]=a(" and modify the ",-1)),e[11]||(e[11]=i("a",{href:"https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/722f0ddd4765715199a5dc90ea1bec2940322344/src/Python/sample.py#L54",target:"_blank",rel:"noopener noreferrer"},[i("code",null,"# Task parameters can be found in docs/integration.md")],-1)),e[12]||(e[12]=a(" section in ",-1)),e[13]||(e[13]=i("code",null,"sample.py",-1))]),e[19]||(e[19]=t('<h2 id="emulator-support" tabindex="-1"><a class="header-anchor" href="#emulator-support"><span>Emulator Support</span></a></h2><h3 id="✅-avd" tabindex="-1"><a class="header-anchor" href="#✅-avd"><span>✅ <a href="https://developer.android.com/studio/run/managing-avds" target="_blank" rel="noopener noreferrer">AVD</a></span></a></h3><p>Requirements: 16:9 screen resolution larger than 720p</p><p>Recommended configuration: x86_64 architecture (R - 30 - x86_64 - Android 11.0) with MAA&#39;s Linux x64 dynamic library</p><p>Note: Starting from Android 10, Minitouch is no longer available when SELinux is in <code>Enforcing</code> mode. Please switch to other touch modes, or <strong>temporarily</strong> switch SELinux to <code>Permissive</code> mode.</p><h3 id="⚠️-genymotion" tabindex="-1"><a class="header-anchor" href="#⚠️-genymotion"><span>⚠️ <a href="https://www.genymotion.com/" target="_blank" rel="noopener noreferrer">Genymotion</a></span></a></h3><p>High Android versions include x86_64 framework. Lightweight but tends to crash when running Arknights.</p><p>Not thoroughly tested yet, but ADB functionality and path retrieval work without issues.</p><h2 id="containerized-android-support" tabindex="-1"><a class="header-anchor" href="#containerized-android-support"><span>Containerized Android Support</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The following solutions typically require specific kernel modules. Please install the appropriate modules according to your distribution and the particular solution.</p></div><h3 id="✅-waydroid" tabindex="-1"><a class="header-anchor" href="#✅-waydroid"><span>✅ <a href="https://waydro.id/" target="_blank" rel="noopener noreferrer">Waydroid</a></span></a></h3><p>After installation, you need to reset the resolution (to 16:9 ratio and greater than 720p, then restart):</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">waydroid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> persist.waydroid.width</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1280</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">waydroid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> persist.waydroid.height</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 720</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>To set up ADB IP address: Go to <code>Settings</code> - <code>About</code> - <code>IP address</code>, note the first <code>IP</code>, and use <code>${recorded IP}:5555</code> in <code>sample.py</code> for the ADB IP.</p><p>If using amdgpu, the <code>screencap</code> command might output messages to stderr, causing image decoding failures. You can run <code>adb exec-out screencap | xxd | head</code> and check if there&#39;s text like <code>/vendor/etc/hwdata/amdgpu.ids: No such file...</code> in the output. If present, try changing the screenshot command in <code>resource/config.json</code> from <code>adb exec-out screencap</code> to <code>adb exec-out &#39;screencap 2&gt;/dev/null&#39;</code>.</p><h3 id="✅-redroid" tabindex="-1"><a class="header-anchor" href="#✅-redroid"><span>✅ <a href="https://github.com/remote-android/redroid-doc" target="_blank" rel="noopener noreferrer">redroid</a></span></a></h3><p>Android 11 version images can run the game normally. Make sure to expose port 5555 for ADB.</p>',17))])}const k=r(p,[["render",u]]),f=JSON.parse('{"path":"/en-us/manual/device/linux.html","title":"Linux Emulators and Containers","lang":"en-US","frontmatter":{"order":3,"icon":"teenyicons:linux-alt-solid","title":"Linux Emulators and Containers","description":"Preparation Choose one of the following installation methods: Using maa-cli maa-cli is a simple command-line tool for MAA written in Rust. Please read the for installation and u...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Emulators and Containers\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.maa.plus/en-us/manual/device/linux.html"}],["meta",{"property":"og:site_name","content":"MaaAssistantArknights"}],["meta",{"property":"og:title","content":"Linux Emulators and Containers"}],["meta",{"property":"og:description","content":"Preparation Choose one of the following installation methods: Using maa-cli maa-cli is a simple command-line tool for MAA written in Rust. Please read the for installation and u..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"ko-KR"}],["meta",{"property":"og:locale:alternate","content":"ja-JP"}],["meta",{"property":"og:locale:alternate","content":"zh-TW"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://docs.maa.plus/ko-kr/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"ja-jp","href":"https://docs.maa.plus/ja-jp/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://docs.maa.plus/zh-tw/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://docs.maa.plus/zh-cn/manual/device/linux.html"}]]},"readingTime":{"minutes":3.12,"words":937},"git":{"createdTime":1758349174000},"autoDesc":true,"filePathRelative":"en-us/manual/device/linux.md","headers":[]}');export{k as comp,f as data};
