import{_ as n}from"./development-enable-vs-clang-format-B6nKGZtb.js";import{_ as r,c as h,a as s,e as d,b as e,d as t,w as l,r as o,o as p}from"./app-BqrZ_F5J.js";const k={};function c(g,i){const a=o("VPLink");return p(),h("div",null,[i[6]||(i[6]=s("h2",{id:"github-pull-request-流程簡述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#github-pull-request-流程簡述"},[s("span",null,"Github Pull Request 流程簡述")])],-1)),i[7]||(i[7]=s("h3",{id:"我不懂寫程式-只是想改一點點-json-文件-文件等-要怎麼操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#我不懂寫程式-只是想改一點點-json-文件-文件等-要怎麼操作"},[s("span",null,"我不懂寫程式，只是想改一點點 JSON 文件/文件等，要怎麼操作？")])],-1)),s("p",null,[i[1]||(i[1]=e("歡迎收看 ",-1)),t(a,{href:"./pr-tutorial.md"},{default:l(()=>[...i[0]||(i[0]=[e("牛牛也能看懂的 GitHub Pull Request 使用指南",-1)])]),_:1}),i[2]||(i[2]=e(" （純網頁端操作 Github.com）",-1))]),i[8]||(i[8]=d(`<h3 id="我會寫程式-但沒接觸過-github-c-要怎麼操作" tabindex="-1"><a class="header-anchor" href="#我會寫程式-但沒接觸過-github-c-要怎麼操作"><span>我會寫程式，但沒接觸過 GitHub/C++/……，要怎麼操作？</span></a></h3><ol><li><p>如果很久以前 Fork 過，先在自己倉庫的 <code>Settings</code> 裡，翻到最下面，刪除</p></li><li><p>打開 <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights" target="_blank" rel="noopener noreferrer">MAA 主倉庫</a>，點擊 <code>Fork</code>，繼續點擊 <code>Create fork</code></p></li><li><p>複製你自己倉庫下的 dev 分支到本地，並拉取子模組</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --recurse-submodules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">你的倉庫的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 連</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">結&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果正在使用 Visual Studio 等不附帶 <code>--recurse-submodules</code> 參數的 Git GUI，則需在複製後再執行 <code>git submodule update --init</code> 以拉取子模組。</p></div></li><li><p>下載預構建的第三方庫</p><p><strong>需要有 Python 環境，請自行搜索 Python 安裝教學</strong></p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tools</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">maadeps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-download.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>配置編程環境</p><ul><li>下載並安裝 <code>Visual Studio 2022 community</code>, 安裝的時候需要選中 <code>基於 C++ 的桌面開發</code> 和 <code>.NET 桌面開發</code>。</li></ul></li><li><p>雙擊打開 <code>MAA.sln</code> 文件，Visual Studio 會自動載入整個項目。</p></li><li><p>設置 VS</p><ul><li>VS 上方配置選擇 <code>RelWithDebInfo</code> <code>x64</code> （如果編譯 Release 包 或 ARM 平台，請忽略這步）</li><li>右鍵 <code>MaaWpfGui</code> - 屬性 - 除錯 - 啟用本地除錯（這樣就能把斷點掛到 C++ Core 那邊了）</li></ul></li><li><p>到這裡，你就可以愉快地 <s>瞎 JB 改</s> 發電了</p></li><li><p>開發過程中，每一定數量，記得提交一個 Commit, 別忘了寫上 Message<br> 假如你不熟悉 git 的使用，你可能想要新建一個分支進行更改，而不是直接提交在 <code>dev</code> 上</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> your_own_branch</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> your_own_branch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>這樣你的提交就能在新的分支上生長，不會受到 <code>dev</code> 更新的打擾</p></li><li><p>完成開發後，推送你修改過的本地分支（以 <code>dev</code> 為例）到遠程（Fork 的倉庫）</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>打開 <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights" target="_blank" rel="noopener noreferrer">MAA 主倉庫</a>。提交一個 Pull Request，等待管理員通過。別忘了你是在 dev 分支上修改，別提交到 master 分支去了</p></li><li><p>當 MAA 原倉庫出現更改（別人做的），你可能需要把這些更改同步到你的分支</p><ol><li><p>關聯 MAA 原倉庫</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upstream</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/MaaAssistantArknights/MaaAssistantArknights.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>從 MAA 原倉庫拉取更新</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fetch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upstream</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>變基（推薦）或者合併修改</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upstream/dev</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 變基</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 合併</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>重複上述 7, 8, 9, 10 中的操作</p></li></ol></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在打開 VS 之後，和 Git 有關的操作可以不用命令行工具，直接使用 VS 自帶的“Git 更改”即可</p></div><h2 id="maa-的檔案格式化要求" tabindex="-1"><a class="header-anchor" href="#maa-的檔案格式化要求"><span>MAA 的檔案格式化要求</span></a></h2><p>MAA 使用一系列的格式化工具來保證倉庫中的代碼和資源文件美觀統一，以便於維護和閱讀</p><p>請確保在提交之前已經格式化，或是<a href="#%E5%88%A9%E7%94%A8-pre-commit-hooks-%E8%87%AA%E5%8B%95%E9%80%B2%E8%A1%8C%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%A0%BC%E5%BC%8F%E5%8C%96">啟用 Pre-commit Hooks 來進行自動格式化</a></p><p>目前啟用的格式化工具如下：</p><table><thead><tr><th>文件類型</th><th>格式化工具</th></tr></thead><tbody><tr><td>C++</td><td><a href="https://clang.llvm.org/docs/ClangFormat.html" target="_blank" rel="noopener noreferrer">clang-format</a></td></tr><tr><td>Json/Yaml</td><td><a href="https://prettier.io/" target="_blank" rel="noopener noreferrer">Prettier</a></td></tr><tr><td>Markdown</td><td><a href="https://github.com/DavidAnson/markdownlint-cli2" target="_blank" rel="noopener noreferrer">markdownlint</a></td></tr></tbody></table><h3 id="利用-pre-commit-hooks-自動進行程式碼格式化" tabindex="-1"><a class="header-anchor" href="#利用-pre-commit-hooks-自動進行程式碼格式化"><span>利用 Pre-commit Hooks 自動進行程式碼格式化</span></a></h3><ol><li><p>確保你的電腦上有 Python 與 Node 環境</p></li><li><p>在項目根目錄下執行以下命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pre-commit</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pre-commit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>如果pip安裝後依然無法運行 Pre-commit，請確認 PIP 安裝地址已被添加到 PATH</p><p>接下來，每次提交時都將會自動運行格式化工具，來確保你的代碼格式符合規範</p><h3 id="在-visual-studio-中啟用-clang-format" tabindex="-1"><a class="header-anchor" href="#在-visual-studio-中啟用-clang-format"><span>在 Visual Studio 中啟用 clang-format</span></a></h3><ol><li><p>安裝 clang-format 20.1.0 或更高版本</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clang-format</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用 Everything 等工具 找到 clang-format.exe 的安裝位置。作為參考，若您使用了 Anaconda，clang-format.exe 將安裝在 YourAnacondaPath/Scripts/clang-format.exe</p></li><li><p>在 Visual Studio <code>工具-選項</code> 中搜索 <code>clang-format</code></p></li><li><p>點擊 <code>啟用 ClangFormat 支持</code>，然後選擇下面的 <code>使用自訂 clang-format.exe 文件</code>，選擇第 2 步找到的 <code>clang-format.exe</code></p></li></ol><p><img src="`+n+'" alt="Visual Studio 設置 clang-format"></p><p>然後你的 Visual Studio 就能愉快的使用支持 C++20 語法的 clang-format 啦！</p><p>你也可以使用 <code>tools\\ClangFormatter\\clang-formatter.py</code> 來直接調用你的 clang-format 來進行格式化，只需要在項目根目錄下執行：</p><ul><li><code>python tools\\ClangFormatter\\clang-formatter.py --clang-format=PATH\\TO\\YOUR\\clang-format.exe --input=src\\MaaCore</code></li></ul><h2 id="使用-github-codespace-進行在線開發" tabindex="-1"><a class="header-anchor" href="#使用-github-codespace-進行在線開發"><span>使用 GitHub codespace 進行在線開發</span></a></h2><p>創建 GitHub codespace 自動配置 C++ 開發環境</p><p><a href="https://codespaces.new/MaaAssistantArknights/MaaAssistantArknights" target="_blank" rel="noopener noreferrer"><img src="https://github.com/codespaces/badge.svg?color=green" alt="Open in GitHub Codespaces"></a></p>',21)),s("p",null,[i[4]||(i[4]=e("隨後根據 vscode 的提示或 ",-1)),t(a,{href:"./linux-tutorial.md"},{default:l(()=>[...i[3]||(i[3]=[e("Linux 教學",-1)])]),_:1}),i[5]||(i[5]=e(" 配置 GCC 12 和 CMake 工程",-1))])])}const b=r(k,[["render",c]]),A=JSON.parse('{"path":"/zh-tw/develop/development.html","title":"開發前須知","lang":"zh-TW","frontmatter":{"order":1,"icon":"iconoir:developer","title":"開發前須知","description":"Github Pull Request 流程簡述 我不懂寫程式，只是想改一點點 JSON 文件/文件等，要怎麼操作？ 歡迎收看 （純網頁端操作 Github.com） 我會寫程式，但沒接觸過 GitHub/C++/……，要怎麼操作？ 如果很久以前 Fork 過，先在自己倉庫的 Settings 裡，翻到最下面，刪除 打開 MAA 主倉庫，點擊 Fork...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"開發前須知\\",\\"image\\":[\\"https://docs.maa.plus/images/zh-cn/development-enable-vs-clang-format.png\\",\\"https://github.com/codespaces/badge.svg?color=green\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.maa.plus/zh-tw/develop/development.html"}],["meta",{"property":"og:site_name","content":"MaaAssistantArknights"}],["meta",{"property":"og:title","content":"開發前須知"}],["meta",{"property":"og:description","content":"Github Pull Request 流程簡述 我不懂寫程式，只是想改一點點 JSON 文件/文件等，要怎麼操作？ 歡迎收看 （純網頁端操作 Github.com） 我會寫程式，但沒接觸過 GitHub/C++/……，要怎麼操作？ 如果很久以前 Fork 過，先在自己倉庫的 Settings 裡，翻到最下面，刪除 打開 MAA 主倉庫，點擊 Fork..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docs.maa.plus/images/zh-cn/development-enable-vs-clang-format.png"}],["meta",{"property":"og:locale","content":"zh-TW"}],["meta",{"property":"og:locale:alternate","content":"ko-KR"}],["meta",{"property":"og:locale:alternate","content":"ja-JP"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://docs.maa.plus/ko-kr/develop/development.html"}],["link",{"rel":"alternate","hreflang":"ja-jp","href":"https://docs.maa.plus/ja-jp/develop/development.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://docs.maa.plus/en-us/develop/development.html"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://docs.maa.plus/zh-cn/develop/development.html"}]]},"readingTime":{"minutes":3.84,"words":1151},"git":{"createdTime":1758189309000},"autoDesc":true,"filePathRelative":"zh-tw/develop/development.md","headers":[]}');export{b as comp,A as data};
