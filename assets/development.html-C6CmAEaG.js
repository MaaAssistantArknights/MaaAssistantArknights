import{_ as n}from"./development-enable-vs-clang-format-B6nKGZtb.js";import{_ as h,c as r,a as s,e as d,b as e,d as t,w as l,r as p,o}from"./app-BkJ_ETHV.js";const k={},c={class:"hint-container tip"};function g(u,i){const a=p("VPLink");return o(),r("div",null,[s("div",c,[i[2]||(i[2]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[i[1]||(i[1]=e("本页面主要描述了 PR 流程以及 MAA 的文件格式化要求，如果你想要具体了解如何对 MAA 的运行逻辑做出更改，请参看 ",-1)),t(a,{href:"../protocol/"},{default:l(()=>[...i[0]||(i[0]=[e("协议文档",-1)])]),_:1})])]),i[9]||(i[9]=s("h2",{id:"github-pull-request-流程简述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#github-pull-request-流程简述"},[s("span",null,"Github Pull Request 流程简述")])],-1)),i[10]||(i[10]=s("h3",{id:"我不懂编程-只是想改一点点-json-文件-文档等-要怎么操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#我不懂编程-只是想改一点点-json-文件-文档等-要怎么操作"},[s("span",null,"我不懂编程，只是想改一点点 JSON 文件/文档等，要怎么操作？")])],-1)),s("p",null,[i[4]||(i[4]=e("欢迎收看 ",-1)),t(a,{href:"./pr-tutorial.md"},{default:l(()=>[...i[3]||(i[3]=[e("牛牛也能看懂的 GitHub Pull Request 使用指南",-1)])]),_:1}),i[5]||(i[5]=e(" （纯网页端操作 Github.com）",-1))]),i[11]||(i[11]=d(`<h3 id="我会编程-但没接触过-github-c-要怎么操作" tabindex="-1"><a class="header-anchor" href="#我会编程-但没接触过-github-c-要怎么操作"><span>我会编程，但没接触过 GitHub/C++/……，要怎么操作？</span></a></h3><ol><li><p>如果很久以前 Fork 过，先在自己仓库的 <code>Settings</code> 里，翻到最下面，删除</p></li><li><p>打开 <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights" target="_blank" rel="noopener noreferrer">MAA 主仓库</a>，点击 <code>Fork</code>，继续点击 <code>Create fork</code></p></li><li><p>克隆你自己仓库下的 dev 分支到本地，并拉取子模块</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --recurse-submodules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">你的仓库的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 链</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">接&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果正在使用 Visual Studio 等不附带 <code>--recurse-submodules</code> 参数的 Git GUI，则需在克隆后再执行 <code>git submodule update --init</code> 以拉取子模块。</p></div></li><li><p>下载预构建的第三方库</p><p><strong>需要有 Python 环境，请自行搜索 Python 安装教程</strong></p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tools</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">maadeps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-download.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>配置编程环境</p><ul><li>下载并安装 <code>CMake</code></li><li>下载并安装 <code>Visual Studio 2022 community</code>, 安装的时候需要选中 <code>基于 C++ 的桌面开发</code> 和 <code>.NET 桌面开发</code>。</li></ul></li><li><p>执行 cmake 项目配置</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mkdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> build</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cmake</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Visual Studio 17 2022&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">B</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DBUILD_WPF_GUI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DBUILD_DEBUG_DEMO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ON</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>双击打开 <code>build/MAA.sln</code> 文件，Visual Studio 会自动加载整个项目。</p></li><li><p>设置 VS</p><ul><li>VS 上方配置选择 <code>Debug</code> <code>x64</code></li><li>右键 <code>MaaWpfGui</code> - 设为启动项目</li><li>按 F5 运行</li></ul></li><li><p>到这里，你就可以愉快地 <s>瞎 JB 改</s> 发电了</p></li><li><p>开发过程中，每一定数量，记得提交一个 Commit, 别忘了写上 Message<br> 假如你不熟悉 git 的使用，你可能想要新建一个分支进行更改，而不是直接提交在 <code>dev</code> 上</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> your_own_branch</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> your_own_branch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样你的提交就能在新的分支上生长，不会受到 <code>dev</code> 更新的打扰</p></li><li><p>完成开发后，推送你修改过的本地分支（以 <code>dev</code> 为例）到远程（Fork 的仓库）</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>打开 <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights" target="_blank" rel="noopener noreferrer">MAA 主仓库</a>。提交一个 Pull Request，等待管理员通过。别忘了你是在 dev 分支上修改，别提交到 master 分支去了</p></li><li><p>当 MAA 原仓库出现更改（别人做的），你可能需要把这些更改同步到你的分支</p><ol><li><p>关联 MAA 原仓库</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upstream</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/MaaAssistantArknights/MaaAssistantArknights.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>从 MAA 原仓库拉取更新</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fetch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upstream</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>变基（推荐）或者合并修改</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upstream/dev</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 变基</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 合并</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>重复上述 7, 8, 9, 10 中的操作</p></li></ol></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在打开 VS 之后，和 Git 有关的操作可以不用命令行工具，直接使用 VS 自带的“Git 更改”即可</p></div><h2 id="maa-的文件格式化要求" tabindex="-1"><a class="header-anchor" href="#maa-的文件格式化要求"><span>MAA 的文件格式化要求</span></a></h2><p>MAA 使用一系列的格式化工具来保证仓库中的代码和资源文件美观统一，以便于维护和阅读</p><p>请确保在提交之前已经格式化，或是<a href="#%E5%88%A9%E7%94%A8-pre-commit-hooks-%E8%87%AA%E5%8A%A8%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96">启用 Pre-commit Hooks 来进行自动格式化</a></p><p>目前启用的格式化工具如下：</p><table><thead><tr><th>文件类型</th><th>格式化工具</th></tr></thead><tbody><tr><td>C++</td><td><a href="https://clang.llvm.org/docs/ClangFormat.html" target="_blank" rel="noopener noreferrer">clang-format</a></td></tr><tr><td>Json/Yaml</td><td><a href="https://prettier.io/" target="_blank" rel="noopener noreferrer">Prettier</a></td></tr><tr><td>Markdown</td><td><a href="https://github.com/DavidAnson/markdownlint-cli2" target="_blank" rel="noopener noreferrer">markdownlint</a></td></tr></tbody></table><h3 id="利用-pre-commit-hooks-自动进行代码格式化" tabindex="-1"><a class="header-anchor" href="#利用-pre-commit-hooks-自动进行代码格式化"><span>利用 Pre-commit Hooks 自动进行代码格式化</span></a></h3><ol><li><p>确保你的电脑上有 Python 与 Node 环境</p></li><li><p>在项目根目录下执行以下命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pre-commit</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pre-commit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>如果pip安装后依然无法运行 Pre-commit，请确认 PIP 安装地址已被添加到 PATH</p><p>接下来，每次提交时都将会自动运行格式化工具，来确保你的代码格式符合规范</p><h3 id="在-visual-studio-中启用-clang-format" tabindex="-1"><a class="header-anchor" href="#在-visual-studio-中启用-clang-format"><span>在 Visual Studio 中启用 clang-format</span></a></h3><ol><li><p>安装 clang-format 20.1.0 或更高版本</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clang-format</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用 Everything 等工具 找到 clang-format.exe 的安装位置。作为参考，若您使用了 Anaconda，clang-format.exe 将安装在 YourAnacondaPath/Scripts/clang-format.exe</p></li><li><p>在 Visual Studio <code>工具-选项</code> 中搜索 <code>clang-format</code></p></li><li><p>点击 <code>启用 ClangFormat 支持</code>，然后选择下面的 <code>使用自定义 clang-format.exe 文件</code>，选择第 2 步找到的 <code>clang-format.exe</code></p></li></ol><p><img src="`+n+'" alt="Visual Studio 设置 clang-format"></p><p>然后你的 Visual Studio 就能愉快的使用支持 C++20 语法的 clang-format 啦！</p><p>你也可以使用 <code>tools\\ClangFormatter\\clang-formatter.py</code> 来直接调用你的 clang-format 来进行格式化，只需要在项目根目录下执行：</p><ul><li><code>python tools\\ClangFormatter\\clang-formatter.py --clang-format=PATH\\TO\\YOUR\\clang-format.exe --input=src\\MaaCore</code></li></ul><h2 id="使用-github-codespace-进行在线开发" tabindex="-1"><a class="header-anchor" href="#使用-github-codespace-进行在线开发"><span>使用 GitHub Codespace 进行在线开发</span></a></h2><p>创建 GitHub Codespace 自动配置 C++ 开发环境</p><p><a href="https://codespaces.new/MaaAssistantArknights/MaaAssistantArknights" target="_blank" rel="noopener noreferrer"><img src="https://github.com/codespaces/badge.svg?color=green" alt="Open in GitHub Codespaces"></a></p>',21)),s("p",null,[i[7]||(i[7]=e("随后根据 VSCode 的提示或 ",-1)),t(a,{href:"./linux-tutorial.md"},{default:l(()=>[...i[6]||(i[6]=[e("Linux 教程",-1)])]),_:1}),i[8]||(i[8]=e(" 配置 GCC 12 和 CMake 工程",-1))])])}const A=h(k,[["render",g]]),v=JSON.parse('{"path":"/zh-cn/develop/development.html","title":"开发前须知","lang":"zh-CN","frontmatter":{"order":1,"icon":"iconoir:developer","title":"开发前须知","description":"提示 本页面主要描述了 PR 流程以及 MAA 的文件格式化要求，如果你想要具体了解如何对 MAA 的运行逻辑做出更改，请参看 Github Pull Request 流程简述 我不懂编程，只是想改一点点 JSON 文件/文档等，要怎么操作？ 欢迎收看 （纯网页端操作 Github.com） 我会编程，但没接触过 GitHub/C++/……，要怎么操作...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开发前须知\\",\\"image\\":[\\"https://docs.maa.plus/images/zh-cn/development-enable-vs-clang-format.png\\",\\"https://github.com/codespaces/badge.svg?color=green\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.maa.plus/zh-cn/develop/development.html"}],["meta",{"property":"og:site_name","content":"MaaAssistantArknights"}],["meta",{"property":"og:title","content":"开发前须知"}],["meta",{"property":"og:description","content":"提示 本页面主要描述了 PR 流程以及 MAA 的文件格式化要求，如果你想要具体了解如何对 MAA 的运行逻辑做出更改，请参看 Github Pull Request 流程简述 我不懂编程，只是想改一点点 JSON 文件/文档等，要怎么操作？ 欢迎收看 （纯网页端操作 Github.com） 我会编程，但没接触过 GitHub/C++/……，要怎么操作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docs.maa.plus/images/zh-cn/development-enable-vs-clang-format.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"ko-KR"}],["meta",{"property":"og:locale:alternate","content":"ja-JP"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-TW"}],["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://docs.maa.plus/ko-kr/develop/development.html"}],["link",{"rel":"alternate","hreflang":"ja-jp","href":"https://docs.maa.plus/ja-jp/develop/development.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://docs.maa.plus/en-us/develop/development.html"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://docs.maa.plus/zh-tw/develop/development.html"}]]},"readingTime":{"minutes":4.01,"words":1202},"git":{"createdTime":1758349174000},"autoDesc":true,"filePathRelative":"zh-cn/develop/development.md","headers":[]}');export{A as comp,v as data};
