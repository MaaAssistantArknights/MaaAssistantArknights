import{_ as a,c as o,b as t,o as i}from"./app-DbvXOh0a.js";const r={};function c(l,e){return i(),o("div",null,e[0]||(e[0]=[t('<h1 id="ci-系统解析" tabindex="-1"><a class="header-anchor" href="#ci-系统解析"><span>CI 系统解析</span></a></h1><p>MAA 借助 Github Action 完成了大量的自动化工作，包括网站的构建，自动更新资源，最终文件的构建与发版等等过程。随着时间的推移，这些 CI 逐渐开始嵌套，部分甚至引向了其他的存储库。本文档旨在为想要对 MAA 的 CI 系统做出改进的各位做一个简要的介绍。</p><p>阅读本文当前，最好对 MAA 的项目结构以及组成有一个基本的概念</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可以通过在本页面内搜索 CI 文件名来快速导航到想看的部分</p></div><p>工作流的文件均存放在 <code>.github/workflows</code> 下，各个文件可以按功能分为以下几部分：</p><ul><li><a href="#%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95">代码测试</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E6%9E%84%E5%BB%BA">代码构建</a></li><li><a href="#%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83">版本发布</a></li><li><a href="#%E8%B5%84%E6%BA%90%E6%9B%B4%E6%96%B0">资源更新</a></li><li><a href="#%E7%BD%91%E7%AB%99%E6%9E%84%E5%BB%BA">网站构建</a></li><li><a href="#issues-%E7%AE%A1%E7%90%86">Issues 管理</a></li><li><a href="#pull-requests-%E7%AE%A1%E7%90%86">Pull Requests 管理</a></li><li><a href="#mirrorchyan-%E7%9B%B8%E5%85%B3">MirrorChyan 相关</a></li><li><a href="#%E5%85%B6%E4%BB%96">其他</a></li></ul><p>此外，我们还通过 <a href="https://pre-commit.ci/" target="_blank" rel="noopener noreferrer">pre-commit.ci</a> 实现了代码的自动格式化和图片资源的自动优化，它在发起 PR 后会自动执行，一般无需特别在意。</p><h2 id="github-action-部分" tabindex="-1"><a class="header-anchor" href="#github-action-部分"><span>Github Action 部分</span></a></h2><h3 id="代码测试" tabindex="-1"><a class="header-anchor" href="#代码测试"><span>代码测试</span></a></h3><p><code>smoke-testing.yml</code></p><p>本工作流主要负责对 MaaCore 做出基本的检测，包括资源文件加载，部分简单 task 运行测试等等</p><p>由于测试用例已经较久没有更新，该工作流现在基本是为了保证资源文件不会出现错误，以及 MaaCore 的代码没有出现致命性错误（影响到构建的那种）</p><h3 id="代码构建" tabindex="-1"><a class="header-anchor" href="#代码构建"><span>代码构建</span></a></h3><p><code>ci.yml</code></p><p>本工作流负责对代码进行全量构建工作，包含 MAA 的所有组件，构建成品即为可运行的 MAA</p><p>除了必要的 MaaCore 外，Windows 构建产物会包含 MaaWpfGui，MacOS 构建产物会包含 MaaMacGui，Linux 构建产物会包含 MaaCLI</p><p>该工作流在出现任何新 Commit 以及 PR 时都会自动运行，且当该工作流由发版 PR 触发时，本次的构建产物将会直接用于发版，并且会创建一个 Release</p><h3 id="版本发布" tabindex="-1"><a class="header-anchor" href="#版本发布"><span>版本发布</span></a></h3><p>版本发布，简称发版，是向用户发布更新的必要操作，由以下工作流组成</p><ul><li><code>release-nightly-ota.yml</code> 发布内测版</li><li><code>release-ota.yml</code> 发布正式版/公测版 <ul><li><code>gen-changelog.yml</code> 为正式版/公测版生成 changelog</li><li><code>pr-auto-tag.yml</code> 对正式版/公测版生成 tag</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>上述文件名内的 ota 意为 Over-the-Air，也就是我们常说的“增量更新包”，因此 MAA 的发版过程实际上包含了对过往版本构建 OTA 包的步骤</p></div><h4 id="内测版" tabindex="-1"><a class="header-anchor" href="#内测版"><span>内测版</span></a></h4><p><code>release-nightly-ota.yml</code></p><p>本工作流会在每天 UTC 时间 22 点自动运行，以保证内测版的发版频率。当然，你也可以在做出更改需要验证时手动发版</p><p>需要注意的是，内测版的发布仅针对 Windows 用户，MacOS 与 Linux 用户并不能接收到内测更新</p><h4 id="正式版-公测版" tabindex="-1"><a class="header-anchor" href="#正式版-公测版"><span>正式版/公测版</span></a></h4><p>这两个通道的发版流程相对复杂一点，我们通过模拟一次发版步骤来解释各工作流的作用</p><ol><li>建立由 <code>dev</code> 到 <code>master</code> 分支的 pr，且该 pr 的名字需要为 <code>Release v******</code></li><li><code>gen-changelog.yml</code> 会生成最近的正式版/公测版到当前版本的 changelog（以一个新 pr 的形式）</li><li>对 changelog 进行手动调整，并且添加简要描述</li><li>合并 pr，触发 <code>pr-auto-tag.yml</code>，创建 tag 并且同步分支</li><li>Release 事件触发 <code>release-ota.yml</code>，对 master 打完 tag 后进行 ota 包的构建以及附件上传</li></ol><h3 id="资源更新" tabindex="-1"><a class="header-anchor" href="#资源更新"><span>资源更新</span></a></h3><p>这部分工作流主要负责 MAA 的资源更新以及优化，具体工作流如下：</p><ul><li><code>res-update-game.yml</code> 定期执行，从指定的仓库拉取游戏资源</li><li><code>sync-resource.yml</code> 将资源同步到 MaaResource 仓库，用于资源更新</li><li><code>optimize-templates.yml</code> 优化模板图大小</li></ul><h3 id="网站构建" tabindex="-1"><a class="header-anchor" href="#网站构建"><span>网站构建</span></a></h3><p><code>website-workflow.yml</code></p><p>本工作流主要负责 MAA 官网的构建与发布，包括主页面与文档两个组件，</p><p>请注意，网站的发布与发版强绑定，平常修改网页组件的时候只会进行构建以保证不会有错误，在发版时才会正式部署到 Azure 上</p><h3 id="issues-管理" tabindex="-1"><a class="header-anchor" href="#issues-管理"><span>Issues 管理</span></a></h3><p><code>issue-checker.yml</code></p><p>通过正则匹配给各个 Issue 打 Tag，以此来分类标记 Issue 内容，方便查看与管理</p><p><code>issue-checkbox-checker.yml</code></p><p>通过正则匹配自动关闭勾选“我未仔细阅读”的 Issue<br> 若“我未仔细阅读”未被勾选，则将所有勾选框折叠</p><p><code>stale.yml</code></p><p>检查超过 90 天没有活动的 Bug Issue，将其标记并发起通知，7 天后若还没有活动则关闭</p><h3 id="pull-requests-管理" tabindex="-1"><a class="header-anchor" href="#pull-requests-管理"><span>Pull Requests 管理</span></a></h3><p><code>pr-checker.yml</code></p><p>该工作流用于检查 PR 中的 Commit Message 是否符合 <a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener noreferrer">约定式提交</a>，以及是否包含 Merge Commit，若上述条件符合则会作出提示。</p><h3 id="mirrorchyan-相关" tabindex="-1"><a class="header-anchor" href="#mirrorchyan-相关"><span>MirrorChyan 相关</span></a></h3><p>MirrorChyan 是有偿的更新镜像服务，与其相关的工作流如下：</p><ul><li><code>mirrorchyan.yml</code> 同步更新包到 MirrorChyan</li><li><code>mirrorchyan_release_note.yml</code> 生成 MirrorChyan 的 Release Note</li></ul><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p><code>markdown-checker.yml</code></p><p>负责检查仓库中的所有 Markdown 文件中是否包含无效链接</p><p><code>blame-ignore.yml</code></p><p>自动忽略 Commit Message 包含 <code>blame ignore</code> 的提交，保证仓库历史的干净</p><p><code>cache-delete.yml</code></p><p>在 PR 合并后清理相关的缓存，以此来节省缓存用量</p>',55)]))}const n=a(r,[["render",c]]),p=JSON.parse('{"path":"/zh-cn/develop/ci-tutorial.html","title":"CI 系统解析","lang":"zh-cn","frontmatter":{"order":7,"icon":"devicon-plain:githubactions","description":"CI 系统解析 MAA 借助 Github Action 完成了大量的自动化工作，包括网站的构建，自动更新资源，最终文件的构建与发版等等过程。随着时间的推移，这些 CI 逐渐开始嵌套，部分甚至引向了其他的存储库。本文档旨在为想要对 MAA 的 CI 系统做出改进的各位做一个简要的介绍。 阅读本文当前，最好对 MAA 的项目结构以及组成有一个基本的概念 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CI 系统解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-16T17:24:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MaaAssistantArknights\\"}]}"],["meta",{"property":"og:url","content":"https://maa.plus/docs/zh-cn/develop/ci-tutorial.html"}],["meta",{"property":"og:site_name","content":"MaaAssistantArknights"}],["meta",{"property":"og:title","content":"CI 系统解析"}],["meta",{"property":"og:description","content":"CI 系统解析 MAA 借助 Github Action 完成了大量的自动化工作，包括网站的构建，自动更新资源，最终文件的构建与发版等等过程。随着时间的推移，这些 CI 逐渐开始嵌套，部分甚至引向了其他的存储库。本文档旨在为想要对 MAA 的 CI 系统做出改进的各位做一个简要的介绍。 阅读本文当前，最好对 MAA 的项目结构以及组成有一个基本的概念 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-cn"}],["meta",{"property":"og:updated_time","content":"2025-07-16T17:24:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T17:24:35.000Z"}]]},"git":{"createdTime":1752686675000,"updatedTime":1752686675000,"contributors":[{"name":"MistEO","username":"MistEO","email":"mistereo@hotmail.com","commits":1,"url":"https://github.com/MistEO"}]},"readingTime":{"minutes":4.56,"words":1367},"filePathRelative":"zh-cn/develop/ci-tutorial.md","autoDesc":true}');export{n as comp,p as data};
