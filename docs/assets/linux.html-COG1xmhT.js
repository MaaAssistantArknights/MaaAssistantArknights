import{_ as r,c as l,b as t,a,e as i,d as s,w as o,r as d,o as h}from"./app-DbvXOh0a.js";const p={};function c(u,e){const n=d("RouteLink");return h(),l("div",null,[e[18]||(e[18]=t('<h1 id="linux-emulator-and-container" tabindex="-1"><a class="header-anchor" href="#linux-emulator-and-container"><span>Linux Emulator and Container</span></a></h1><h2 id="preparation" tabindex="-1"><a class="header-anchor" href="#preparation"><span>Preparation</span></a></h2><p>You can choose one of the following installation methods:</p><h3 id="use-maa-cli" tabindex="-1"><a class="header-anchor" href="#use-maa-cli"><span>Use maa-cli</span></a></h3>',4)),a("p",null,[e[1]||(e[1]=a("a",{href:"https://github.com/MaaAssistantArknights/maa-cli",target:"_blank",rel:"noopener noreferrer"},"maa-cli",-1)),e[2]||(e[2]=i(" is a simple CLI for MAA made with Rust. Please read installation and usage tutorials in ")),s(n,{to:"/en-us/manual/cli/"},{default:o(()=>e[0]||(e[0]=[i("User Guide for CLI")])),_:1,__:[0]}),e[3]||(e[3]=i("."))]),e[19]||(e[19]=t('<h3 id="use-wine" tabindex="-1"><a class="header-anchor" href="#use-wine"><span>Use Wine</span></a></h3><p>The MAA WPF GUI can currently be run using Wine.</p><h4 id="installation-steps" tabindex="-1"><a class="header-anchor" href="#installation-steps"><span>Installation Steps</span></a></h4><ol><li><p>Go to the <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0" target="_blank" rel="noopener noreferrer">.NET Release Page</a> to download and install the .NET <strong>Desktop</strong> Runtime for Windows.</p></li><li><p>Download MAA for Windows, unzip it and run <code>wine MAA.exe</code>.</p></li></ol><div class="hint-container info"><p class="hint-container-title">Note</p><p>You need to set the ADB path to <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener noreferrer"><code>adb.exe</code> for Windows</a> in the connection settings.</p><p>If you need to connect to USB devices via ADB, please run <code>adb start-server</code> outside of Wine first, i.e. connect to the native ADB server via Wine.</p></div><h4 id="use-linux-native-maacore-experimental-feature" tabindex="-1"><a class="header-anchor" href="#use-linux-native-maacore-experimental-feature"><span>Use Linux native MaaCore (experimental feature)</span></a></h4><p>Download the <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/tree/dev/src/MaaWineBridge" target="_blank" rel="noopener noreferrer">MAA Wine Bridge</a> source and build it, replace the Windows version with the generated <code>MaaCore.dll</code> (ELF file) in the same directory as the Linux native dynamic libraries (<code>libMaaCore.so</code> and dependencies).</p><p>Running <code>MAA.exe</code> through Wine will load the Linux native libraries.</p><div class="hint-container info"><p class="hint-container-title">Note</p><p>To use Linux native MaaCore, you need to set the ADB path to Linux native ADB in the connection settings.</p></div><h4 id="linux-desktop-integration-experimental-feature" tabindex="-1"><a class="header-anchor" href="#linux-desktop-integration-experimental-feature"><span>Linux Desktop Integration (experimental feature)</span></a></h4><p>Desktop integration provides native desktop notification support and the ability to map fontconfig font configurations to WPF.</p><p>Enable it by placing <code>MaaDesktopIntegration.so</code> generated by MAA Wine Bridge in the same directory as <code>MAA.exe</code>.</p><h4 id="known-issues" tabindex="-1"><a class="header-anchor" href="#known-issues"><span>Known Issues</span></a></h4><ul><li>Wine DirectWrite forces hinting to be enabled and does not pass DPI to FreeType, resulting in poor font display.</li><li>When not using native desktop notifications, the popup notification will grab the system-wide mouse focus, making it impossible to operate other windows. This can be mitigated by enabling virtual desktop mode via <code>winecfg</code>, or disabling desktop notifications.</li><li>Wine-staging users need to disable the <code>Hide Wine Version</code> option in <code>winecfg</code> in order for MAA to properly detect the Wine environment.</li><li>Wine&#39;s Light theme causes some text colours in WPF to be abnormal, it is recommended to switch to no theme (Windows Classic theme) in <code>winecfg</code>.</li><li>Wine uses the old XEmbed tray icon, which may not work properly under GNOME.</li><li>Auto-update is not supported when using Linux native MaaCore (<s>Updater: I think I should download a Windows version</s>).</li></ul><h3 id="use-python" tabindex="-1"><a class="header-anchor" href="#use-python"><span>Use Python</span></a></h3><h4 id="_1-installing-dynamic-library" tabindex="-1"><a class="header-anchor" href="#_1-installing-dynamic-library"><span>1. Installing dynamic library</span></a></h4><ol><li><p>Download and extract <code>Linux library</code> in <a href="https://maa.plus/" target="_blank" rel="noopener noreferrer">MAA Website</a>, or install from linux software repository:</p><ul><li>AUR：<a href="https://aur.archlinux.org/packages/maa-assistant-arknights" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a>, edit the script according to the post-install instruction.</li><li>Nixpkgs: <a href="https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/by-name/ma/maa-assistant-arknights/package.nix" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a></li></ul></li><li><p>Open <code>sample.py</code> in <code>./MAA-v{VERSION}-linux-{ARCH}/Python/</code></p></li></ol>',17)),a("blockquote",null,[a("p",null,[e[5]||(e[5]=a("strong",null,"Note",-1)),e[6]||(e[6]=a("br",null,null,-1)),e[7]||(e[7]=i(" The precompiled version is built in a relatively new distro (Ubuntu 22.04), you may run into binary compatability problem, if libstdc++ in your environment is too old.")),e[8]||(e[8]=a("br",null,null,-1)),e[9]||(e[9]=i(" Where you should reference to ")),s(n,{to:"/en-us/develop/linux-tutorial.html"},{default:o(()=>e[4]||(e[4]=[i("Linux tutorial")])),_:1,__:[4]}),e[10]||(e[10]=i(", or run inside a container instead."))])]),e[20]||(e[20]=t(`<h4 id="_2-adb-settings" tabindex="-1"><a class="header-anchor" href="#_2-adb-settings"><span>2. <code>adb</code> Settings</span></a></h4><ol><li><p>Target to <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/722f0ddd4765715199a5dc90ea1bec2940322344/src/Python/sample.py#L48" target="_blank" rel="noopener noreferrer"><code>if asst.connect(&#39;adb.exe&#39;, &#39;127.0.0.1:5554&#39;):</code></a></p></li><li><p><code>adb</code> Tools Settings</p><ul><li>If you use <code>avd</code> in <code>Android Studio</code> as your emulator, it contains <code>adb</code> that you can use it directly. Just fill in your <code>adb</code> path in <code>adb.exe</code>, you can usually find it in <code>$HOME/Android/Sdk/platform-tools/</code> , eg.:</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#81A1C1;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D8DEE9FF;"> asst</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">.</span><span style="--shiki-light:#000000;--shiki-dark:#88C0D0;">connect</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">/home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">,</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;"> &quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">avd_ID</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>If you use other emulators, you have to install <code>adb</code> first: <code>$ sudo apt install adb</code> and then fill in the path of adb or just fill in <code>adb</code> if you had put it into the <code>PATH</code> environment variable.</li></ul></li><li><p>Emulator <code>adb</code> ID Settings</p><ul><li>You can use the adb tool directly: <code>$ \${adb_path} devices</code> , eg.:</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">$</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> /home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> devices</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">List</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> of</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> devices</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> attached</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">emulator-5554</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>emulator-5554</code> that the terminal returns is the ID of emulator adb, replacing <code>127.0.0.1:5555</code> with it, eg.：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#81A1C1;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D8DEE9FF;"> asst</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">.</span><span style="--shiki-light:#000000;--shiki-dark:#88C0D0;">connect</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">/home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">,</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;"> &quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">emulator-5554</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Now you can test: <code>$ python3 sample.py</code> , if return <code>连接成功</code> , you almost finish setting.</p></li></ol><h4 id="_3-tasks-settings" tabindex="-1"><a class="header-anchor" href="#_3-tasks-settings"><span>3. Tasks Settings</span></a></h4>`,3)),a("p",null,[e[12]||(e[12]=i("Customizing tasks: Reference to ")),s(n,{to:"/en-us/protocol/integration.html#asstappendtask"},{default:o(()=>e[11]||(e[11]=[i("AsstAppendTask")])),_:1,__:[11]}),e[13]||(e[13]=i(" and modify ")),e[14]||(e[14]=a("a",{href:"https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/722f0ddd4765715199a5dc90ea1bec2940322344/src/Python/sample.py#L54",target:"_blank",rel:"noopener noreferrer"},[a("code",null,"# 任务及参数请参考 docs/集成文档.md")],-1)),e[15]||(e[15]=i(" section in ")),e[16]||(e[16]=a("code",null,"sample.py",-1)),e[17]||(e[17]=i("."))]),e[21]||(e[21]=t('<h2 id="emulator-supports" tabindex="-1"><a class="header-anchor" href="#emulator-supports"><span>Emulator Supports</span></a></h2><h3 id="✅-avd" tabindex="-1"><a class="header-anchor" href="#✅-avd"><span>✅ <a href="https://developer.android.com/studio/run/managing-avds" target="_blank" rel="noopener noreferrer">AVD</a></span></a></h3><p>Requests: Resolution should be 16:9 and above 720p</p><p>Recommendation: x86_64 architecture (R - 30 - x86_64 - Android 11.0) with <code>Linux x64 动态库</code> in MAA</p><h3 id="⚠️-genymotion" tabindex="-1"><a class="header-anchor" href="#⚠️-genymotion"><span>⚠️ <a href="https://www.genymotion.com/" target="_blank" rel="noopener noreferrer">Genymotion</a></span></a></h3><p>Native x86_64 architecture in high version of Android, light weight but easy to crash when running Arknights.</p><p>We have not testing strictly, but adb functions and path have no error.</p><h2 id="containerized-android" tabindex="-1"><a class="header-anchor" href="#containerized-android"><span>Containerized Android</span></a></h2><blockquote><p><strong>Note</strong><br> The following solutions are likely to depend on special kernel modules, make sure to have them installed accordingly.</p></blockquote><h3 id="✅-waydroid" tabindex="-1"><a class="header-anchor" href="#✅-waydroid"><span>✅ <a href="https://waydro.id/" target="_blank" rel="noopener noreferrer">Waydroid</a></span></a></h3><p>Need to reset the resolution to 16:9 (You can set it above 720P):</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">waydroid</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> prop</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> set</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> persist.waydroid.width</span><span style="--shiki-light:#098658;--shiki-dark:#B48EAD;"> 1280</span></span>\n<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">waydroid</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> prop</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> set</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> persist.waydroid.height</span><span style="--shiki-light:#098658;--shiki-dark:#B48EAD;"> 720</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>After restarting, record <code>IP address</code> in <code>Setting</code> - <code>About phone</code> , fill <code>${IP address}:5555</code> to the adb IP address in <code>sample.py</code> .</p><p>If you are using amdgpu, <code>screencap</code> command may write messages to stderr, causing image decoding error.<br> Run <code>adb exec-out screencap | xxd | head</code> to check if there is something like <code>/vendor/etc/hwdata/amdgpu.ids: No such file...</code> in the output.<br> Modify screencap commands in <code>resource/config.json</code> from <code>adb exec-out screencap</code> to <code>adb exec-out &#39;screencap 2&gt;/dev/null&#39;</code> as a workaround.</p><h3 id="✅-redroid" tabindex="-1"><a class="header-anchor" href="#✅-redroid"><span>✅ <a href="https://github.com/remote-android/redroid-doc" target="_blank" rel="noopener noreferrer">redroid</a></span></a></h3><p>Arknights runs properly in Android 11 image. Do remember to expose port 5555 for adb.</p>',16))])}const g=r(p,[["render",c]]),m=JSON.parse('{"path":"/en-us/manual/device/linux.html","title":"Linux Emulator and Container","lang":"en-us","frontmatter":{"order":3,"icon":"teenyicons:linux-alt-solid","description":"Linux Emulator and Container Preparation You can choose one of the following installation methods: Use maa-cli maa-cli is a simple CLI for MAA made with Rust. Please read instal...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Emulator and Container\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-16T17:24:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MaaAssistantArknights\\"}]}"],["meta",{"property":"og:url","content":"https://maa.plus/docs/en-us/manual/device/linux.html"}],["meta",{"property":"og:site_name","content":"MaaAssistantArknights"}],["meta",{"property":"og:title","content":"Linux Emulator and Container"}],["meta",{"property":"og:description","content":"Linux Emulator and Container Preparation You can choose one of the following installation methods: Use maa-cli maa-cli is a simple CLI for MAA made with Rust. Please read instal..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-us"}],["meta",{"property":"og:locale:alternate","content":"ko-kr"}],["meta",{"property":"og:locale:alternate","content":"ja-jp"}],["meta",{"property":"og:locale:alternate","content":"zh-tw"}],["meta",{"property":"og:locale:alternate","content":"zh-cn"}],["meta",{"property":"og:updated_time","content":"2025-07-16T17:24:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T17:24:35.000Z"}],["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://maa.plus/docs/ko-kr/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"ja-jp","href":"https://maa.plus/docs/ja-jp/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://maa.plus/docs/zh-tw/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://maa.plus/docs/zh-cn/manual/device/linux.html"}]]},"git":{"createdTime":1752686675000,"updatedTime":1752686675000,"contributors":[{"name":"MistEO","username":"MistEO","email":"mistereo@hotmail.com","commits":1,"url":"https://github.com/MistEO"}]},"readingTime":{"minutes":3.06,"words":918},"filePathRelative":"en-us/manual/device/linux.md","autoDesc":true}');export{g as comp,m as data};
