import{_ as d,c as r,b as s,a,e,d as n,w as l,r as o,o as h}from"./app-DbvXOh0a.js";const p={},k={class:"hint-container tip"};function c(g,i){const t=o("RouteLink");return h(),r("div",null,[i[15]||(i[15]=s('<h1 id="linux-지원" tabindex="-1"><a class="header-anchor" href="#linux-지원"><span>Linux 지원</span></a></h1><h2 id="준비-작업" tabindex="-1"><a class="header-anchor" href="#준비-작업"><span>준비 작업</span></a></h2><p>다음중 하나의 설치 방법을 선택하세요.</p><h3 id="maa-cli-사용" tabindex="-1"><a class="header-anchor" href="#maa-cli-사용"><span>maa-cli 사용</span></a></h3>',4)),a("p",null,[i[1]||(i[1]=a("a",{href:"https://github.com/MaaAssistantArknights/maa-cli",target:"_blank",rel:"noopener noreferrer"},"maa-cli",-1)),i[2]||(i[2]=e("는 Rust로 작성된 간단한 MAA 커맨드 라인 도구입니다. 관련 설치 및 사용 방법은 ")),n(t,{to:"/ko-kr/manual/cli/"},{default:l(()=>i[0]||(i[0]=[e("CLI 가이드")])),_:1,__:[0]}),i[3]||(i[3]=e("를 참조하세요."))]),i[16]||(i[16]=s('<h3 id="python-사용" tabindex="-1"><a class="header-anchor" href="#python-사용"><span>Python 사용</span></a></h3><h4 id="_1-maa-동적-라이브러리-설치" tabindex="-1"><a class="header-anchor" href="#_1-maa-동적-라이브러리-설치"><span>1. MAA 동적 라이브러리 설치</span></a></h4><ol><li><p><a href="https://maa.plus/" target="_blank" rel="noopener noreferrer">MAA 공식 웹사이트</a>에서 리눅스 라이브러리를 다운로드하고 압축을 풉니다. 혹은 소프트웨어 저장소에서 설치합니다:</p><ul><li>AUR：<a href="https://aur.archlinux.org/packages/maa-assistant-arknights" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a>을 설치한 후에 설치 지침에 따라 파일을 편집합니다.</li><li>Nixpkgs: <a href="https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/by-name/ma/maa-assistant-arknights/package.nix" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a></li></ul></li><li><p><code>./MAA-v{버전}-linux-{아키텍처}/Python/</code> 폴더로 이동하여 <code>sample.py</code> 파일을 엽니다.</p></li></ol>',3)),a("div",k,[i[7]||(i[7]=a("p",{class:"hint-container-title"},"팁",-1)),a("p",null,[i[5]||(i[5]=e("사전 컴파일된 버전은 상대적으로 최신 버전의 리눅스 배포판 (Ubuntu 22.04)에서 컴파일된 동적 라이브러리를 포함하고 있습니다. 시스템의 libstdc++ 버전이 오래되어 ABI 호환성 문제가 발생할 수 있습니다. ")),n(t,{to:"/ko-kr/develop/linux-tutorial.html"},{default:l(()=>i[4]||(i[4]=[e("Linux 컴파일 가이드")])),_:1,__:[4]}),i[6]||(i[6]=e("를 참조하여 다시 컴파일하거나 컨테이너를 실행할 수 있습니다."))])]),i[17]||(i[17]=s(`<h4 id="_2-adb-구성" tabindex="-1"><a class="header-anchor" href="#_2-adb-구성"><span>2. <code>adb</code> 구성</span></a></h4><ol><li><p><a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/722f0ddd4765715199a5dc90ea1bec2940322344/src/Python/sample.py#L48" target="_blank" rel="noopener noreferrer"><code>if asst.connect(&#39;adb.exe&#39;, &#39;127.0.0.1:5554&#39;):</code></a> 줄을 찾습니다.</p></li><li><p><code>adb</code> 도구 호출</p><ul><li>에뮬레이터가 <code>Android Studio</code>의 <code>avd</code>를 사용하는 경우 <code>adb</code>가 내장되어 있습니다. <code>adb.exe</code> 필드에 <code>adb</code> 경로를 입력합니다. 일반적으로 <code>$HOME/Android/Sdk/platform-tools/</code> 폴더에 있습니다. 예시:</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#81A1C1;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D8DEE9FF;"> asst</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">.</span><span style="--shiki-light:#000000;--shiki-dark:#88C0D0;">connect</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">/home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">,</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;"> &quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">모바일 에뮬레이터의 adb 주소</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>다른 에뮬레이터를 사용하는 경우 <code>adb</code>를 먼저 다운로드해야 합니다: <code>$ sudo apt install adb</code>를 실행한 후 경로를 입력하거나 <code>PATH</code> 환경 변수를 사용하여 <code>adb</code>를 입력합니다.</li></ul></li><li><p>에뮬레이터의 <code>adb</code> 경로 확인:</p><ul><li>직접 <code>adb</code> 도구를 사용할 수 있습니다: <code>$ adb경로 devices</code>를 실행하면 됩니다. 예시:</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">$</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> /home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> devices</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">List</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> of</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> devices</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> attached</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">emulator-5554</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>반환된 <code>emulator-5554</code>가 에뮬레이터의 <code>adb</code> 주소이므로 <code>127.0.0.1:5555</code>를 덮어씁니다. 예를 들어:</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#81A1C1;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D8DEE9FF;"> asst</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">.</span><span style="--shiki-light:#000000;--shiki-dark:#88C0D0;">connect</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">/home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">,</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;"> &quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">emulator-5554</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>이제 테스트를 진행해볼 수 있습니다: <code>$ python3 sample.py</code>를 실행한 후 연결 성공이 표시되면 대부분의 작업이 완료된 것입니다.</p></li></ol><h4 id="_3-작업-설정" tabindex="-1"><a class="header-anchor" href="#_3-작업-설정"><span>3. 작업 설정</span></a></h4>`,3)),a("p",null,[i[9]||(i[9]=e("사용자 정의 작업: ")),n(t,{to:"/ko-kr/protocol/integration.html"},{default:l(()=>i[8]||(i[8]=[e("통합 문서")])),_:1,__:[8]}),i[10]||(i[10]=e("를 참조하고, ")),i[11]||(i[11]=a("code",null,"sample.py",-1)),i[12]||(i[12]=e("의 # 작업 및 매개 변수는 ")),i[13]||(i[13]=a("a",{href:"https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/722f0ddd4765715199a5dc90ea1bec2940322344/src/Python/sample.py#L54",target:"_blank",rel:"noopener noreferrer"},"예제",-1)),i[14]||(i[14]=e("를 참조해 줄을 수정하세요."))]),i[18]||(i[18]=s('<h2 id="모바일-시뮬레이터-지원" tabindex="-1"><a class="header-anchor" href="#모바일-시뮬레이터-지원"><span>모바일 시뮬레이터 지원</span></a></h2><h3 id="✅-avd" tabindex="-1"><a class="header-anchor" href="#✅-avd"><span>✅ <a href="https://developer.android.com/studio/run/managing-avds" target="_blank" rel="noopener noreferrer">AVD</a></span></a></h3><p>필수 구성: 16:9 비율의 화면 해상도이며 해상도는 720p보다 커야 합니다.</p><p>권장 구성: MAA의 리눅스 x64 동적 라이브러리와 함께 x86_64 프레임워크 (R - 30 - x86_64 - Android 11.0) 사용</p><p>참고: Android 10 이상에서는 SELinux가 <code>Enforcing</code> 모드인 경우 <code>Minitouch</code>를 사용할 수 없습니다. 다른 터치 모드로 전환하거나 SELinux를 <strong>임시</strong>로 <code>Permissive</code> 모드로 전환하세요.</p><h3 id="⚠️-genymotion" tabindex="-1"><a class="header-anchor" href="#⚠️-genymotion"><span>⚠️ <a href="https://www.genymotion.com/" target="_blank" rel="noopener noreferrer">Genymotion</a></span></a></h3><p>상위 안드로이드 버전에는 x86_64 프레임워크가 기본으로 포함되어 있습니다. 가볍지만 Arknights를 실행하는 동안 종종 비정상 종료됩니다.</p><p>엄격한 테스트가 아직 진행되지 않았으며 adb 기능 및 경로 검색에 문제가 없습니다.</p><h2 id="안드로이드-컨테이너-지원" tabindex="-1"><a class="header-anchor" href="#안드로이드-컨테이너-지원"><span>안드로이드 컨테이너 지원</span></a></h2><div class="hint-container tip"><p class="hint-container-title">팁</p><p>다음 솔루션은 일반적으로 커널 모듈을 필요로 합니다. 해당 솔루션 및 배포판에 맞는 내부 모듈을 설치하세요.</p></div><h3 id="✅-waydroid" tabindex="-1"><a class="header-anchor" href="#✅-waydroid"><span>✅ <a href="https://waydro.id/" target="_blank" rel="noopener noreferrer">Waydroid</a></span></a></h3><p>설치 후 해상도를 다시 설정해야 합니다. (또는 720P 이상이고 16:9 비율의 해상도를 사용하고 다시 시작해야 합니다):</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">waydroid</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> prop</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> set</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> persist.waydroid.width</span><span style="--shiki-light:#098658;--shiki-dark:#B48EAD;"> 1280</span></span>\n<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">waydroid</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> prop</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> set</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> persist.waydroid.height</span><span style="--shiki-light:#098658;--shiki-dark:#B48EAD;"> 720</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>adb의 IP 주소 설정: <code>설정</code> - <code>정보</code> - <code>IP 주소</code>를 열고 첫 번째 <code>IP</code>를 기록하여 <code>${기록된IP}:5555</code>를 <code>sample.py</code>의 adb IP에 입력하세요.</p><p>amdgpu를 사용하는 경우 <code>screencap</code> 명령이 stderr에 정보를 출력하여 이미지 디코딩이 실패할 수 있습니다. <code>adb exec-out screencap | xxd | head</code>를 실행하여 출력에 <code>/vendor/etc/hwdata/amdgpu.ids: No such file...</code>와 같은 텍스트가 있는지 확인하세요. <code>resource/config.json</code> 파일에서 스크린샷 명령을 <code>adb exec-out &#39;screencap 2&gt;/dev/null&#39;</code>로 변경해보세요.</p><h3 id="✅-redroid" tabindex="-1"><a class="header-anchor" href="#✅-redroid"><span>✅ <a href="https://github.com/remote-android/redroid-doc" target="_blank" rel="noopener noreferrer">redroid</a></span></a></h3><p>안드로이드 11 버전 이미지는 게임을 정상적으로 실행합니다. 5555 adb 포트를 공개해야 합니다.</p>',17))])}const m=d(p,[["render",c]]),y=JSON.parse('{"path":"/ko-kr/manual/device/linux.html","title":"Linux 지원","lang":"ko-kr","frontmatter":{"order":3,"icon":"teenyicons:linux-alt-solid","description":"Linux 지원 준비 작업 다음중 하나의 설치 방법을 선택하세요. maa-cli 사용 maa-cli는 Rust로 작성된 간단한 MAA 커맨드 라인 도구입니다. 관련 설치 및 사용 방법은 를 참조하세요. Python 사용 1. MAA 동적 라이브러리 설치 MAA 공식 웹사이트에서 리눅스 라이브러리를 다운로드하고 압축을...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux 지원\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-16T17:24:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MaaAssistantArknights\\"}]}"],["meta",{"property":"og:url","content":"https://maa.plus/docs/ko-kr/manual/device/linux.html"}],["meta",{"property":"og:site_name","content":"MaaAssistantArknights"}],["meta",{"property":"og:title","content":"Linux 지원"}],["meta",{"property":"og:description","content":"Linux 지원 준비 작업 다음중 하나의 설치 방법을 선택하세요. maa-cli 사용 maa-cli는 Rust로 작성된 간단한 MAA 커맨드 라인 도구입니다. 관련 설치 및 사용 방법은 를 참조하세요. Python 사용 1. MAA 동적 라이브러리 설치 MAA 공식 웹사이트에서 리눅스 라이브러리를 다운로드하고 압축을..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-kr"}],["meta",{"property":"og:locale:alternate","content":"ja-jp"}],["meta",{"property":"og:locale:alternate","content":"en-us"}],["meta",{"property":"og:locale:alternate","content":"zh-tw"}],["meta",{"property":"og:locale:alternate","content":"zh-cn"}],["meta",{"property":"og:updated_time","content":"2025-07-16T17:24:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T17:24:35.000Z"}],["link",{"rel":"alternate","hreflang":"ja-jp","href":"https://maa.plus/docs/ja-jp/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://maa.plus/docs/en-us/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://maa.plus/docs/zh-tw/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://maa.plus/docs/zh-cn/manual/device/linux.html"}]]},"git":{"createdTime":1752686675000,"updatedTime":1752686675000,"contributors":[{"name":"MistEO","username":"MistEO","email":"mistereo@hotmail.com","commits":1,"url":"https://github.com/MistEO"}]},"readingTime":{"minutes":0.82,"words":245},"filePathRelative":"ko-kr/manual/device/linux.md","autoDesc":true}');export{m as comp,y as data};
