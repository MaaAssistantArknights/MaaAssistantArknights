import{_ as r,c as o,b as s,a,e as i,d as t,w as l,r as d,o as h}from"./app-DbvXOh0a.js";const p={},c={class:"hint-container tip"};function k(g,e){const n=d("RouteLink");return h(),o("div",null,[e[17]||(e[17]=s('<h1 id="linux-模拟器与容器" tabindex="-1"><a class="header-anchor" href="#linux-模拟器与容器"><span>Linux 模拟器与容器</span></a></h1><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h2><p>以下安装方式任选其一即可：</p><h3 id="使用-maa-cli" tabindex="-1"><a class="header-anchor" href="#使用-maa-cli"><span>使用 maa-cli</span></a></h3>',4)),a("p",null,[e[1]||(e[1]=a("a",{href:"https://github.com/MaaAssistantArknights/maa-cli",target:"_blank",rel:"noopener noreferrer"},"maa-cli",-1)),e[2]||(e[2]=i(" 是一个使用 Rust 编写的简单 MAA 命令行工具。相关安装与使用教程请阅读 ")),t(n,{to:"/zh-cn/manual/cli/"},{default:l(()=>e[0]||(e[0]=[i("CLI 使用指南")])),_:1,__:[0]}),e[3]||(e[3]=i("。"))]),e[18]||(e[18]=s('<h3 id="使用-wine" tabindex="-1"><a class="header-anchor" href="#使用-wine"><span>使用 Wine</span></a></h3><p>MAA WPF GUI 当前可以通过 Wine 运行。</p><h4 id="安装步骤" tabindex="-1"><a class="header-anchor" href="#安装步骤"><span>安装步骤</span></a></h4><ol><li><p>前往 <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0" target="_blank" rel="noopener noreferrer">.NET 发布页</a>下载并安装 Windows 版 .NET <strong>桌面</strong>运行时。</p></li><li><p>下载 Windows 版 MAA，解压后运行 <code>wine MAA.exe</code>。</p></li></ol><div class="hint-container info"><p class="hint-container-title">注意</p><p>需要在连接设置中将 ADB 路径设置为 <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener noreferrer">Windows 版 <code>adb.exe</code></a>。</p><p>如果您需要通过 ADB 连接 USB 设备，请先在 Wine 外运行 <code>adb start-server</code>，即通过 Wine 连接原生 ADB server。</p></div><h4 id="使用-linux-原生-maacore-实验性功能" tabindex="-1"><a class="header-anchor" href="#使用-linux-原生-maacore-实验性功能"><span>使用 Linux 原生 MaaCore（实验性功能）</span></a></h4><p>下载 <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/tree/dev/src/MaaWineBridge" target="_blank" rel="noopener noreferrer">MAA Wine Bridge</a> 源码并构建，用生成的 <code>MaaCore.dll</code>（ELF 文件）替换 Windows 版本，并将 Linux 原生动态库（<code>libMaaCore.so</code> 以及依赖）放在同一目录下。</p><p>此时通过 Wine 运行 <code>MAA.exe</code>，将会加载 Linux 原生动态库。</p><div class="hint-container info"><p class="hint-container-title">注意</p><p>使用 Linux 原生 MaaCore 时，需要在连接设置中将 ADB 路径设置为 Linux 原生 ADB。</p></div><h4 id="linux-桌面整合-实验性功能" tabindex="-1"><a class="header-anchor" href="#linux-桌面整合-实验性功能"><span>Linux 桌面整合（实验性功能）</span></a></h4><p>桌面整合提供原生桌面通知支持，以及将 fontconfig 字体配置映射到 WPF 的功能。</p><p>将 MAA Wine Bridge 生成的 <code>MaaDesktopIntegration.so</code> 放到 <code>MAA.exe</code> 同目录下即可启用。</p><h4 id="已知问题" tabindex="-1"><a class="header-anchor" href="#已知问题"><span>已知问题</span></a></h4><ul><li>Wine DirectWrite 强制启用 hinting，并且不将 DPI 传递给 FreeType，导致字体显示效果不佳。</li><li>不使用原生桌面通知时，弹出通知会抢占全系统鼠标焦点，导致无法操作其他窗口。可以通过 <code>winecfg</code> 启用虚拟桌面模式缓解，或禁用桌面通知。</li><li>Wine-staging 用户需要关闭 <code>winecfg</code> 中的 <code>隐藏 Wine 版本</code> 选项，以便 MAA 正确检测 Wine 环境。</li><li>Wine 的 Light 主题会导致 WPF 中部分文字颜色异常，建议在 <code>winecfg</code> 中切换到无主题（Windows 经典主题）。</li><li>Wine 使用旧式 XEmbed 托盘图标，在 GNOME 下可能无法正常工作。</li><li>使用 Linux 原生 MaaCore 时暂不支持自动更新（<s>更新程序：我寻思我应该下载个 Windows 版</s>）</li></ul><h3 id="使用-python" tabindex="-1"><a class="header-anchor" href="#使用-python"><span>使用 Python</span></a></h3><h4 id="_1-安装-maa-动态库" tabindex="-1"><a class="header-anchor" href="#_1-安装-maa-动态库"><span>1. 安装 MAA 动态库</span></a></h4><ol><li><p>在 <a href="https://maa.plus/" target="_blank" rel="noopener noreferrer">MAA 官网</a> 下载 Linux 动态库并解压，或从软件源安装：</p><ul><li>AUR：<a href="https://aur.archlinux.org/packages/maa-assistant-arknights" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a>，按照安装后的提示编辑文件</li><li>Nixpkgs: <a href="https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/by-name/ma/maa-assistant-arknights/package.nix" target="_blank" rel="noopener noreferrer">maa-assistant-arknights</a></li></ul></li><li><p>进入 <code>./MAA-v{版本号}-linux-{架构}/Python/</code> 目录下打开 <code>sample.py</code> 文件</p></li></ol>',17)),a("div",c,[e[9]||(e[9]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[e[5]||(e[5]=i("预编译的版本包含在相对较新的 Linux 发行版 (Ubuntu 22.04) 中编译的动态库，如果您系统中的 libstdc++ 版本较老，可能遇到 ABI 不兼容的问题")),e[6]||(e[6]=a("br",null,null,-1)),e[7]||(e[7]=i(" 可以参考 ")),t(n,{to:"/zh-cn/develop/linux-tutorial.html"},{default:l(()=>e[4]||(e[4]=[i("Linux 编译教程")])),_:1,__:[4]}),e[8]||(e[8]=i(" 重新编译或使用容器运行"))])]),e[19]||(e[19]=s(`<h4 id="_2-adb-配置" tabindex="-1"><a class="header-anchor" href="#_2-adb-配置"><span>2. ADB 配置</span></a></h4><ol><li><p>找到 <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/b4fc3528decd6777441a8aca684c22d35d2b2574/src/Python/sample.py#L62" target="_blank" rel="noopener noreferrer"><code>if asst.connect(&#39;adb.exe&#39;, &#39;127.0.0.1:5554&#39;):</code></a> 一栏</p></li><li><p>ADB 工具调用</p><ul><li>如果模拟器使用 <code>Android Studio</code> 的 <code>avd</code> ，其自带 ADB 。可以直接在 <code>adb.exe</code> 一栏填写 ADB 路径，一般在 <code>$HOME/Android/Sdk/platform-tools/</code> 里面可以找到，例如：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#81A1C1;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D8DEE9FF;"> asst</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">.</span><span style="--shiki-light:#000000;--shiki-dark:#88C0D0;">connect</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">/home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">,</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;"> &quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">模拟器的 ADB 地址</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果使用其他模拟器须先下载 ADB ： <code>$ sudo apt install adb</code> 后填写路径或利用 <code>PATH</code> 环境变量直接填写 <code>adb</code> 即可。</li></ul></li><li><p>模拟器 ADB 路径获取</p><ul><li>可以直接使用 ADB 工具： <code>$ adb路径 devices</code> ，例如：</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">$</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> /home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> devices</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">List</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> of</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> devices</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> attached</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">emulator-5554</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> device</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回的 <code>emulator-5554</code> 就是模拟器的 ADB 地址，覆盖掉 <code>127.0.0.1:5555</code> ，例如：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#81A1C1;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D8DEE9FF;"> asst</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">.</span><span style="--shiki-light:#000000;--shiki-dark:#88C0D0;">connect</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">/home/foo/Android/Sdk/platform-tools/adb</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">,</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;"> &quot;</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;">emulator-5554</span><span style="--shiki-light:#A31515;--shiki-dark:#ECEFF4;">&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#ECEFF4;">):</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>这时候可以测试下： <code>$ python3 sample.py</code> ，如果返回 <code>连接成功</code> 则基本成功了。</p></li></ol><h4 id="_3-任务配置" tabindex="-1"><a class="header-anchor" href="#_3-任务配置"><span>3. 任务配置</span></a></h4>`,3)),a("p",null,[e[11]||(e[11]=i("自定义任务： 根据需要参考 ")),t(n,{to:"/zh-cn/protocol/integration.html"},{default:l(()=>e[10]||(e[10]=[i("集成文档")])),_:1,__:[10]}),e[12]||(e[12]=i(" 对 ")),e[13]||(e[13]=a("code",null,"sample.py",-1)),e[14]||(e[14]=i(" 的 ")),e[15]||(e[15]=a("a",{href:"https://github.com/MaaAssistantArknights/MaaAssistantArknights/blob/722f0ddd4765715199a5dc90ea1bec2940322344/src/Python/sample.py#L54",target:"_blank",rel:"noopener noreferrer"},[a("code",null,"# 任务及参数请参考 docs/integration.md")],-1)),e[16]||(e[16]=i(" 一栏进行修改"))]),e[20]||(e[20]=s('<h2 id="模拟器支持" tabindex="-1"><a class="header-anchor" href="#模拟器支持"><span>模拟器支持</span></a></h2><h3 id="✅-avd" tabindex="-1"><a class="header-anchor" href="#✅-avd"><span>✅ <a href="https://developer.android.com/studio/run/managing-avds" target="_blank" rel="noopener noreferrer">AVD</a></span></a></h3><p>必选配置： 16:9 的屏幕分辨率，且分辨率需大于 720p</p><p>推荐配置： x86_64 的框架 (R - 30 - x86_64 - Android 11.0) 配合 MAA 的 Linux x64 动态库</p><p>注意：从 Android 10 开始，Minitouch 在 SELinux 为 <code>Enforcing</code> 模式时不再可用，请切换至其他触控模式，或将 SELinux <strong>临时</strong>切换为 <code>Permissive</code> 模式。</p><h3 id="⚠️-genymotion" tabindex="-1"><a class="header-anchor" href="#⚠️-genymotion"><span>⚠️ <a href="https://www.genymotion.com/" target="_blank" rel="noopener noreferrer">Genymotion</a></span></a></h3><p>高版本安卓自带 x86_64 框架，轻量但是运行明日方舟时易闪退</p><p>暂未严格测试， ADB 功能和路径获取没有问题</p><h2 id="容器化安卓的支持" tabindex="-1"><a class="header-anchor" href="#容器化安卓的支持"><span>容器化安卓的支持</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>以下方案通常对内核模块有一定要求, 请根据具体方案和发行版安装合适的内核模块</p></div><h3 id="✅-waydroid" tabindex="-1"><a class="header-anchor" href="#✅-waydroid"><span>✅ <a href="https://waydro.id/" target="_blank" rel="noopener noreferrer">Waydroid</a></span></a></h3><p>安装后需要重新设置分辨率（或者大于 720P 且为 16:9 的分辨率，然后重新启动）：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#000000;--shiki-dark:#d8dee9ff;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#2e3440ff;"><pre class="shiki shiki-themes light-plus nord vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">waydroid</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> prop</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> set</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> persist.waydroid.width</span><span style="--shiki-light:#098658;--shiki-dark:#B48EAD;"> 1280</span></span>\n<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#88C0D0;">waydroid</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> prop</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> set</span><span style="--shiki-light:#A31515;--shiki-dark:#A3BE8C;"> persist.waydroid.height</span><span style="--shiki-light:#098658;--shiki-dark:#B48EAD;"> 720</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 ADB 的 IP 地址：打开 <code>设置</code> - <code>关于</code> - <code>IP地址</code> ，记录第一个 <code>IP</code> ，将 <code>${记录的IP}:5555</code> 填入<code>sample.py</code> 的 adb IP 一栏。</p><p>如果使用 amdgpu, <code>screencap</code> 命令可能向 stderr 输出信息导致图片解码失败.<br> 可以运行 <code>adb exec-out screencap | xxd | head</code> 并检查输出中是否有类似 <code>/vendor/etc/hwdata/amdgpu.ids: No such file...</code> 的文本来确认这一点.<br> 尝试将 <code>resource/config.json</code> 中的截图命令由 <code>adb exec-out screencap</code> 改为 <code>adb exec-out &#39;screencap 2&gt;/dev/null&#39;</code>.</p><h3 id="✅-redroid" tabindex="-1"><a class="header-anchor" href="#✅-redroid"><span>✅ <a href="https://github.com/remote-android/redroid-doc" target="_blank" rel="noopener noreferrer">redroid</a></span></a></h3><p>安卓 11 版本的镜像可正常运行游戏, 需要暴露 5555 ADB 端口.</p>',17))])}const m=r(p,[["render",k]]),A=JSON.parse('{"path":"/zh-cn/manual/device/linux.html","title":"Linux 模拟器与容器","lang":"zh-cn","frontmatter":{"order":3,"icon":"teenyicons:linux-alt-solid","description":"Linux 模拟器与容器 准备工作 以下安装方式任选其一即可： 使用 maa-cli maa-cli 是一个使用 Rust 编写的简单 MAA 命令行工具。相关安装与使用教程请阅读 。 使用 Wine MAA WPF GUI 当前可以通过 Wine 运行。 安装步骤 前往 .NET 发布页下载并安装 Windows 版 .NET 桌面运行时。 下载 W...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux 模拟器与容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-16T17:24:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MaaAssistantArknights\\"}]}"],["meta",{"property":"og:url","content":"https://maa.plus/docs/zh-cn/manual/device/linux.html"}],["meta",{"property":"og:site_name","content":"MaaAssistantArknights"}],["meta",{"property":"og:title","content":"Linux 模拟器与容器"}],["meta",{"property":"og:description","content":"Linux 模拟器与容器 准备工作 以下安装方式任选其一即可： 使用 maa-cli maa-cli 是一个使用 Rust 编写的简单 MAA 命令行工具。相关安装与使用教程请阅读 。 使用 Wine MAA WPF GUI 当前可以通过 Wine 运行。 安装步骤 前往 .NET 发布页下载并安装 Windows 版 .NET 桌面运行时。 下载 W..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-cn"}],["meta",{"property":"og:locale:alternate","content":"ko-kr"}],["meta",{"property":"og:locale:alternate","content":"ja-jp"}],["meta",{"property":"og:locale:alternate","content":"en-us"}],["meta",{"property":"og:locale:alternate","content":"zh-tw"}],["meta",{"property":"og:updated_time","content":"2025-07-16T17:24:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T17:24:35.000Z"}],["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://maa.plus/docs/ko-kr/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"ja-jp","href":"https://maa.plus/docs/ja-jp/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://maa.plus/docs/en-us/manual/device/linux.html"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://maa.plus/docs/zh-tw/manual/device/linux.html"}]]},"git":{"createdTime":1752686675000,"updatedTime":1752686675000,"contributors":[{"name":"MistEO","username":"MistEO","email":"mistereo@hotmail.com","commits":1,"url":"https://github.com/MistEO"}]},"readingTime":{"minutes":4.41,"words":1323},"filePathRelative":"zh-cn/manual/device/linux.md","autoDesc":true}');export{m as comp,A as data};
